// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: query_write.proto

#include "query_write.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace ts_proto {
    constexpr MetricWriter_DimensionsEntry_DoNotUse::MetricWriter_DimensionsEntry_DoNotUse(
            ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
    struct MetricWriter_DimensionsEntry_DoNotUseDefaultTypeInternal {
        constexpr MetricWriter_DimensionsEntry_DoNotUseDefaultTypeInternal()
                : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
        ~MetricWriter_DimensionsEntry_DoNotUseDefaultTypeInternal() {}
        union {
            MetricWriter_DimensionsEntry_DoNotUse _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MetricWriter_DimensionsEntry_DoNotUseDefaultTypeInternal _MetricWriter_DimensionsEntry_DoNotUse_default_instance_;
    constexpr MetricWriter_MetricsEntry_DoNotUse::MetricWriter_MetricsEntry_DoNotUse(
            ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
    struct MetricWriter_MetricsEntry_DoNotUseDefaultTypeInternal {
        constexpr MetricWriter_MetricsEntry_DoNotUseDefaultTypeInternal()
                : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
        ~MetricWriter_MetricsEntry_DoNotUseDefaultTypeInternal() {}
        union {
            MetricWriter_MetricsEntry_DoNotUse _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MetricWriter_MetricsEntry_DoNotUseDefaultTypeInternal _MetricWriter_MetricsEntry_DoNotUse_default_instance_;
    constexpr MetricWriter_MetricUIDEntry_DoNotUse::MetricWriter_MetricUIDEntry_DoNotUse(
            ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
    struct MetricWriter_MetricUIDEntry_DoNotUseDefaultTypeInternal {
        constexpr MetricWriter_MetricUIDEntry_DoNotUseDefaultTypeInternal()
                : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
        ~MetricWriter_MetricUIDEntry_DoNotUseDefaultTypeInternal() {}
        union {
            MetricWriter_MetricUIDEntry_DoNotUse _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MetricWriter_MetricUIDEntry_DoNotUseDefaultTypeInternal _MetricWriter_MetricUIDEntry_DoNotUse_default_instance_;
    constexpr MetricWriter::MetricWriter(
            ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
            : dimensions_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
            , metrics_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
            , metricuid_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
            , namespace__(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
            , schema_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
            , metadatauid_(uint64_t{0u})
            , timestamp_(0u){}
    struct MetricWriterDefaultTypeInternal {
        constexpr MetricWriterDefaultTypeInternal()
                : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
        ~MetricWriterDefaultTypeInternal() {}
        union {
            MetricWriter _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MetricWriterDefaultTypeInternal _MetricWriter_default_instance_;
    constexpr WriteResponse::WriteResponse(
            ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
            : metrics_received_(0u){}
    struct WriteResponseDefaultTypeInternal {
        constexpr WriteResponseDefaultTypeInternal()
                : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
        ~WriteResponseDefaultTypeInternal() {}
        union {
            WriteResponse _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WriteResponseDefaultTypeInternal _WriteResponse_default_instance_;
    constexpr MetricsReader_DimensionsEntry_DoNotUse::MetricsReader_DimensionsEntry_DoNotUse(
            ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
    struct MetricsReader_DimensionsEntry_DoNotUseDefaultTypeInternal {
        constexpr MetricsReader_DimensionsEntry_DoNotUseDefaultTypeInternal()
                : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
        ~MetricsReader_DimensionsEntry_DoNotUseDefaultTypeInternal() {}
        union {
            MetricsReader_DimensionsEntry_DoNotUse _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MetricsReader_DimensionsEntry_DoNotUseDefaultTypeInternal _MetricsReader_DimensionsEntry_DoNotUse_default_instance_;
    constexpr MetricsReader::MetricsReader(
            ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
            : dimensions_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
            , metric_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
            , query_start_time_(0u)
            , query_end_time_(0u){}
    struct MetricsReaderDefaultTypeInternal {
        constexpr MetricsReaderDefaultTypeInternal()
                : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
        ~MetricsReaderDefaultTypeInternal() {}
        union {
            MetricsReader _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MetricsReaderDefaultTypeInternal _MetricsReader_default_instance_;
    constexpr ReaderResponse::ReaderResponse(
            ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
            : points_(){}
    struct ReaderResponseDefaultTypeInternal {
        constexpr ReaderResponseDefaultTypeInternal()
                : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
        ~ReaderResponseDefaultTypeInternal() {}
        union {
            ReaderResponse _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReaderResponseDefaultTypeInternal _ReaderResponse_default_instance_;
    constexpr Timeseries_DimensionsEntry_DoNotUse::Timeseries_DimensionsEntry_DoNotUse(
            ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
    struct Timeseries_DimensionsEntry_DoNotUseDefaultTypeInternal {
        constexpr Timeseries_DimensionsEntry_DoNotUseDefaultTypeInternal()
                : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
        ~Timeseries_DimensionsEntry_DoNotUseDefaultTypeInternal() {}
        union {
            Timeseries_DimensionsEntry_DoNotUse _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Timeseries_DimensionsEntry_DoNotUseDefaultTypeInternal _Timeseries_DimensionsEntry_DoNotUse_default_instance_;
    constexpr Timeseries::Timeseries(
            ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
            : dimensions_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
            , points_(){}
    struct TimeseriesDefaultTypeInternal {
        constexpr TimeseriesDefaultTypeInternal()
                : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
        ~TimeseriesDefaultTypeInternal() {}
        union {
            Timeseries _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TimeseriesDefaultTypeInternal _Timeseries_default_instance_;
    constexpr TimeseriesPoint::TimeseriesPoint(
            ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
            : value_(0)
            , timestamp_(0u){}
    struct TimeseriesPointDefaultTypeInternal {
        constexpr TimeseriesPointDefaultTypeInternal()
                : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
        ~TimeseriesPointDefaultTypeInternal() {}
        union {
            TimeseriesPoint _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TimeseriesPointDefaultTypeInternal _TimeseriesPoint_default_instance_;
    constexpr UIDReader::UIDReader(
            ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
            : uid_(int64_t{0})
            , query_start_time_(0u)
            , query_end_time_(0u){}
    struct UIDReaderDefaultTypeInternal {
        constexpr UIDReaderDefaultTypeInternal()
                : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
        ~UIDReaderDefaultTypeInternal() {}
        union {
            UIDReader _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UIDReaderDefaultTypeInternal _UIDReader_default_instance_;
}  // namespace ts_proto
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_query_5fwrite_2eproto[12];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_query_5fwrite_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_query_5fwrite_2eproto = nullptr;

const uint32_t TableStruct_query_5fwrite_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::ts_proto::MetricWriter_DimensionsEntry_DoNotUse, _has_bits_),
        PROTOBUF_FIELD_OFFSET(::ts_proto::MetricWriter_DimensionsEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        PROTOBUF_FIELD_OFFSET(::ts_proto::MetricWriter_DimensionsEntry_DoNotUse, key_),
        PROTOBUF_FIELD_OFFSET(::ts_proto::MetricWriter_DimensionsEntry_DoNotUse, value_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::ts_proto::MetricWriter_MetricsEntry_DoNotUse, _has_bits_),
        PROTOBUF_FIELD_OFFSET(::ts_proto::MetricWriter_MetricsEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        PROTOBUF_FIELD_OFFSET(::ts_proto::MetricWriter_MetricsEntry_DoNotUse, key_),
        PROTOBUF_FIELD_OFFSET(::ts_proto::MetricWriter_MetricsEntry_DoNotUse, value_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::ts_proto::MetricWriter_MetricUIDEntry_DoNotUse, _has_bits_),
        PROTOBUF_FIELD_OFFSET(::ts_proto::MetricWriter_MetricUIDEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        PROTOBUF_FIELD_OFFSET(::ts_proto::MetricWriter_MetricUIDEntry_DoNotUse, key_),
        PROTOBUF_FIELD_OFFSET(::ts_proto::MetricWriter_MetricUIDEntry_DoNotUse, value_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::ts_proto::MetricWriter, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        PROTOBUF_FIELD_OFFSET(::ts_proto::MetricWriter, namespace__),
        PROTOBUF_FIELD_OFFSET(::ts_proto::MetricWriter, schema_),
        PROTOBUF_FIELD_OFFSET(::ts_proto::MetricWriter, dimensions_),
        PROTOBUF_FIELD_OFFSET(::ts_proto::MetricWriter, metrics_),
        PROTOBUF_FIELD_OFFSET(::ts_proto::MetricWriter, timestamp_),
        PROTOBUF_FIELD_OFFSET(::ts_proto::MetricWriter, metadatauid_),
        PROTOBUF_FIELD_OFFSET(::ts_proto::MetricWriter, metricuid_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::ts_proto::WriteResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        PROTOBUF_FIELD_OFFSET(::ts_proto::WriteResponse, metrics_received_),
        PROTOBUF_FIELD_OFFSET(::ts_proto::MetricsReader_DimensionsEntry_DoNotUse, _has_bits_),
        PROTOBUF_FIELD_OFFSET(::ts_proto::MetricsReader_DimensionsEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        PROTOBUF_FIELD_OFFSET(::ts_proto::MetricsReader_DimensionsEntry_DoNotUse, key_),
        PROTOBUF_FIELD_OFFSET(::ts_proto::MetricsReader_DimensionsEntry_DoNotUse, value_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::ts_proto::MetricsReader, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        PROTOBUF_FIELD_OFFSET(::ts_proto::MetricsReader, metric_name_),
        PROTOBUF_FIELD_OFFSET(::ts_proto::MetricsReader, dimensions_),
        PROTOBUF_FIELD_OFFSET(::ts_proto::MetricsReader, query_start_time_),
        PROTOBUF_FIELD_OFFSET(::ts_proto::MetricsReader, query_end_time_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::ts_proto::ReaderResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        PROTOBUF_FIELD_OFFSET(::ts_proto::ReaderResponse, points_),
        PROTOBUF_FIELD_OFFSET(::ts_proto::Timeseries_DimensionsEntry_DoNotUse, _has_bits_),
        PROTOBUF_FIELD_OFFSET(::ts_proto::Timeseries_DimensionsEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        PROTOBUF_FIELD_OFFSET(::ts_proto::Timeseries_DimensionsEntry_DoNotUse, key_),
        PROTOBUF_FIELD_OFFSET(::ts_proto::Timeseries_DimensionsEntry_DoNotUse, value_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::ts_proto::Timeseries, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        PROTOBUF_FIELD_OFFSET(::ts_proto::Timeseries, dimensions_),
        PROTOBUF_FIELD_OFFSET(::ts_proto::Timeseries, points_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::ts_proto::TimeseriesPoint, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        PROTOBUF_FIELD_OFFSET(::ts_proto::TimeseriesPoint, timestamp_),
        PROTOBUF_FIELD_OFFSET(::ts_proto::TimeseriesPoint, value_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::ts_proto::UIDReader, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        PROTOBUF_FIELD_OFFSET(::ts_proto::UIDReader, uid_),
        PROTOBUF_FIELD_OFFSET(::ts_proto::UIDReader, query_start_time_),
        PROTOBUF_FIELD_OFFSET(::ts_proto::UIDReader, query_end_time_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 8, -1, sizeof(::ts_proto::MetricWriter_DimensionsEntry_DoNotUse)},
        { 10, 18, -1, sizeof(::ts_proto::MetricWriter_MetricsEntry_DoNotUse)},
        { 20, 28, -1, sizeof(::ts_proto::MetricWriter_MetricUIDEntry_DoNotUse)},
        { 30, -1, -1, sizeof(::ts_proto::MetricWriter)},
        { 43, -1, -1, sizeof(::ts_proto::WriteResponse)},
        { 50, 58, -1, sizeof(::ts_proto::MetricsReader_DimensionsEntry_DoNotUse)},
        { 60, -1, -1, sizeof(::ts_proto::MetricsReader)},
        { 70, -1, -1, sizeof(::ts_proto::ReaderResponse)},
        { 77, 85, -1, sizeof(::ts_proto::Timeseries_DimensionsEntry_DoNotUse)},
        { 87, -1, -1, sizeof(::ts_proto::Timeseries)},
        { 95, -1, -1, sizeof(::ts_proto::TimeseriesPoint)},
        { 103, -1, -1, sizeof(::ts_proto::UIDReader)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ts_proto::_MetricWriter_DimensionsEntry_DoNotUse_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ts_proto::_MetricWriter_MetricsEntry_DoNotUse_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ts_proto::_MetricWriter_MetricUIDEntry_DoNotUse_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ts_proto::_MetricWriter_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ts_proto::_WriteResponse_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ts_proto::_MetricsReader_DimensionsEntry_DoNotUse_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ts_proto::_MetricsReader_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ts_proto::_ReaderResponse_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ts_proto::_Timeseries_DimensionsEntry_DoNotUse_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ts_proto::_Timeseries_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ts_proto::_TimeseriesPoint_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ts_proto::_UIDReader_default_instance_),
};

const char descriptor_table_protodef_query_5fwrite_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
        "\n\021query_write.proto\022\010ts_proto\"\232\003\n\014Metric"
        "Writer\022\021\n\tnamespace\030\001 \001(\t\022\016\n\006schema\030\002 \001("
        "\t\022:\n\ndimensions\030\003 \003(\0132&.ts_proto.MetricW"
        "riter.DimensionsEntry\0224\n\007metrics\030\004 \003(\0132#"
        ".ts_proto.MetricWriter.MetricsEntry\022\021\n\tt"
        "imestamp\030\005 \001(\r\022\023\n\013metadataUID\030\006 \001(\004\0228\n\tm"
        "etricUID\030\007 \003(\0132%.ts_proto.MetricWriter.M"
        "etricUIDEntry\0321\n\017DimensionsEntry\022\013\n\003key\030"
        "\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\032.\n\014MetricsEntry"
        "\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\001:\0028\001\0320\n\016Metr"
        "icUIDEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\004:\002"
        "8\001\")\n\rWriteResponse\022\030\n\020metrics_received\030"
        "\001 \001(\r\"\306\001\n\rMetricsReader\022\023\n\013metric_name\030\001"
        " \001(\t\022;\n\ndimensions\030\002 \003(\0132\'.ts_proto.Metr"
        "icsReader.DimensionsEntry\022\030\n\020query_start"
        "_time\030\003 \001(\r\022\026\n\016query_end_time\030\004 \001(\r\0321\n\017D"
        "imensionsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001"
        "(\t:\0028\001\"6\n\016ReaderResponse\022$\n\006points\030\001 \003(\013"
        "2\024.ts_proto.Timeseries\"\244\001\n\nTimeseries\0228\n"
        "\ndimensions\030\001 \003(\0132$.ts_proto.Timeseries."
        "DimensionsEntry\022)\n\006points\030\002 \003(\0132\031.ts_pro"
        "to.TimeseriesPoint\0321\n\017DimensionsEntry\022\013\n"
        "\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"3\n\017Timeser"
        "iesPoint\022\021\n\ttimestamp\030\001 \001(\r\022\r\n\005value\030\002 \001"
        "(\001\"J\n\tUIDReader\022\013\n\003uid\030\001 \001(\003\022\030\n\020query_st"
        "art_time\030\002 \001(\r\022\026\n\016query_end_time\030\003 \001(\r2\325"
        "\001\n\016QueryAndIngest\022A\n\014WriteMetrics\022\026.ts_p"
        "roto.MetricWriter\032\027.ts_proto.WriteRespon"
        "se\"\000\022C\n\014QueryMetrics\022\027.ts_proto.MetricsR"
        "eader\032\030.ts_proto.ReaderResponse\"\000\022;\n\010Que"
        "ryUID\022\023.ts_proto.UIDReader\032\030.ts_proto.Re"
        "aderResponse\"\000b\006proto3"
;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_query_5fwrite_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_query_5fwrite_2eproto = {
        false, false, 1262, descriptor_table_protodef_query_5fwrite_2eproto, "query_write.proto",
        &descriptor_table_query_5fwrite_2eproto_once, nullptr, 0, 12,
        schemas, file_default_instances, TableStruct_query_5fwrite_2eproto::offsets,
        file_level_metadata_query_5fwrite_2eproto, file_level_enum_descriptors_query_5fwrite_2eproto, file_level_service_descriptors_query_5fwrite_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_query_5fwrite_2eproto_getter() {
    return &descriptor_table_query_5fwrite_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_query_5fwrite_2eproto(&descriptor_table_query_5fwrite_2eproto);
namespace ts_proto {

// ===================================================================

    MetricWriter_DimensionsEntry_DoNotUse::MetricWriter_DimensionsEntry_DoNotUse() {}
    MetricWriter_DimensionsEntry_DoNotUse::MetricWriter_DimensionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
            : SuperType(arena) {}
    void MetricWriter_DimensionsEntry_DoNotUse::MergeFrom(const MetricWriter_DimensionsEntry_DoNotUse& other) {
        MergeFromInternal(other);
    }
    ::PROTOBUF_NAMESPACE_ID::Metadata MetricWriter_DimensionsEntry_DoNotUse::GetMetadata() const {
        return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
                &descriptor_table_query_5fwrite_2eproto_getter, &descriptor_table_query_5fwrite_2eproto_once,
                file_level_metadata_query_5fwrite_2eproto[0]);
    }

// ===================================================================

    MetricWriter_MetricsEntry_DoNotUse::MetricWriter_MetricsEntry_DoNotUse() {}
    MetricWriter_MetricsEntry_DoNotUse::MetricWriter_MetricsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
            : SuperType(arena) {}
    void MetricWriter_MetricsEntry_DoNotUse::MergeFrom(const MetricWriter_MetricsEntry_DoNotUse& other) {
        MergeFromInternal(other);
    }
    ::PROTOBUF_NAMESPACE_ID::Metadata MetricWriter_MetricsEntry_DoNotUse::GetMetadata() const {
        return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
                &descriptor_table_query_5fwrite_2eproto_getter, &descriptor_table_query_5fwrite_2eproto_once,
                file_level_metadata_query_5fwrite_2eproto[1]);
    }

// ===================================================================

    MetricWriter_MetricUIDEntry_DoNotUse::MetricWriter_MetricUIDEntry_DoNotUse() {}
    MetricWriter_MetricUIDEntry_DoNotUse::MetricWriter_MetricUIDEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
            : SuperType(arena) {}
    void MetricWriter_MetricUIDEntry_DoNotUse::MergeFrom(const MetricWriter_MetricUIDEntry_DoNotUse& other) {
        MergeFromInternal(other);
    }
    ::PROTOBUF_NAMESPACE_ID::Metadata MetricWriter_MetricUIDEntry_DoNotUse::GetMetadata() const {
        return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
                &descriptor_table_query_5fwrite_2eproto_getter, &descriptor_table_query_5fwrite_2eproto_once,
                file_level_metadata_query_5fwrite_2eproto[2]);
    }

// ===================================================================

    class MetricWriter::_Internal {
    public:
    };

    MetricWriter::MetricWriter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                               bool is_message_owned)
            : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
              dimensions_(arena),
              metrics_(arena),
              metricuid_(arena) {
        SharedCtor();
        if (!is_message_owned) {
            RegisterArenaDtor(arena);
        }
        // @@protoc_insertion_point(arena_constructor:ts_proto.MetricWriter)
    }
    MetricWriter::MetricWriter(const MetricWriter& from)
            : ::PROTOBUF_NAMESPACE_ID::Message() {
        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        dimensions_.MergeFrom(from.dimensions_);
        metrics_.MergeFrom(from.metrics_);
        metricuid_.MergeFrom(from.metricuid_);
        namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (!from._internal_namespace_().empty()) {
            namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_namespace_(),
                            GetArenaForAllocation());
        }
        schema_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        schema_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (!from._internal_schema().empty()) {
            schema_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_schema(),
                        GetArenaForAllocation());
        }
        ::memcpy(&metadatauid_, &from.metadatauid_,
                 static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
                                     reinterpret_cast<char*>(&metadatauid_)) + sizeof(timestamp_));
        // @@protoc_insertion_point(copy_constructor:ts_proto.MetricWriter)
    }

    inline void MetricWriter::SharedCtor() {
        namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
        schema_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        schema_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
        ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
                         reinterpret_cast<char*>(&metadatauid_) - reinterpret_cast<char*>(this)),
                 0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
                                        reinterpret_cast<char*>(&metadatauid_)) + sizeof(timestamp_));
    }

    MetricWriter::~MetricWriter() {
        // @@protoc_insertion_point(destructor:ts_proto.MetricWriter)
        if (GetArenaForAllocation() != nullptr) return;
        SharedDtor();
        _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    inline void MetricWriter::SharedDtor() {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
        namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
        schema_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }

    void MetricWriter::ArenaDtor(void* object) {
        MetricWriter* _this = reinterpret_cast< MetricWriter* >(object);
        (void)_this;
        _this->dimensions_. ~MapField();
        _this->metrics_. ~MapField();
        _this->metricuid_. ~MapField();
    }
    inline void MetricWriter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
        if (arena != nullptr) {
            arena->OwnCustomDestructor(this, &MetricWriter::ArenaDtor);
        }
    }
    void MetricWriter::SetCachedSize(int size) const {
        _cached_size_.Set(size);
    }

    void MetricWriter::Clear() {
// @@protoc_insertion_point(message_clear_start:ts_proto.MetricWriter)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void) cached_has_bits;

        dimensions_.Clear();
        metrics_.Clear();
        metricuid_.Clear();
        namespace__.ClearToEmpty();
        schema_.ClearToEmpty();
        ::memset(&metadatauid_, 0, static_cast<size_t>(
                                           reinterpret_cast<char*>(&timestamp_) -
                                           reinterpret_cast<char*>(&metadatauid_)) + sizeof(timestamp_));
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* MetricWriter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
        while (!ctx->Done(&ptr)) {
            uint32_t tag;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
            switch (tag >> 3) {
                // string namespace = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
                        auto str = _internal_mutable_namespace_();
                        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
                        CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ts_proto.MetricWriter.namespace"));
                        CHK_(ptr);
                    } else
                        goto handle_unusual;
                    continue;
                    // string schema = 2;
                case 2:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
                        auto str = _internal_mutable_schema();
                        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
                        CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ts_proto.MetricWriter.schema"));
                        CHK_(ptr);
                    } else
                        goto handle_unusual;
                    continue;
                    // map<string, string> dimensions = 3;
                case 3:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
                        ptr -= 1;
                        do {
                            ptr += 1;
                            ptr = ctx->ParseMessage(&dimensions_, ptr);
                            CHK_(ptr);
                            if (!ctx->DataAvailable(ptr)) break;
                        } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
                    } else
                        goto handle_unusual;
                    continue;
                    // map<string, double> metrics = 4;
                case 4:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
                        ptr -= 1;
                        do {
                            ptr += 1;
                            ptr = ctx->ParseMessage(&metrics_, ptr);
                            CHK_(ptr);
                            if (!ctx->DataAvailable(ptr)) break;
                        } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
                    } else
                        goto handle_unusual;
                    continue;
                    // uint32 timestamp = 5;
                case 5:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
                        timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    } else
                        goto handle_unusual;
                    continue;
                    // uint64 metadataUID = 6;
                case 6:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
                        metadatauid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    } else
                        goto handle_unusual;
                    continue;
                    // map<string, uint64> metricUID = 7;
                case 7:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
                        ptr -= 1;
                        do {
                            ptr += 1;
                            ptr = ctx->ParseMessage(&metricuid_, ptr);
                            CHK_(ptr);
                            if (!ctx->DataAvailable(ptr)) break;
                        } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
                    } else
                        goto handle_unusual;
                    continue;
                default:
                    goto handle_unusual;
            }  // switch
            handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4)) {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                    tag,
                    _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                    ptr, ctx);
            CHK_(ptr != nullptr);
        }  // while
        message_done:
        return ptr;
        failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* MetricWriter::_InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
        // @@protoc_insertion_point(serialize_to_array_start:ts_proto.MetricWriter)
        uint32_t cached_has_bits = 0;
        (void) cached_has_bits;

        // string namespace = 1;
        if (!this->_internal_namespace_().empty()) {
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                    this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                    "ts_proto.MetricWriter.namespace");
            target = stream->WriteStringMaybeAliased(
                    1, this->_internal_namespace_(), target);
        }

        // string schema = 2;
        if (!this->_internal_schema().empty()) {
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                    this->_internal_schema().data(), static_cast<int>(this->_internal_schema().length()),
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                    "ts_proto.MetricWriter.schema");
            target = stream->WriteStringMaybeAliased(
                    2, this->_internal_schema(), target);
        }

        // map<string, string> dimensions = 3;
        if (!this->_internal_dimensions().empty()) {
            typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
                    ConstPtr;
            typedef ConstPtr SortItem;
            typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
            struct Utf8Check {
                static void Check(ConstPtr p) {
                    (void)p;
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                            p->first.data(), static_cast<int>(p->first.length()),
                            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                            "ts_proto.MetricWriter.DimensionsEntry.key");
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                            p->second.data(), static_cast<int>(p->second.length()),
                            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                            "ts_proto.MetricWriter.DimensionsEntry.value");
                }
            };

            if (stream->IsSerializationDeterministic() &&
                this->_internal_dimensions().size() > 1) {
                ::std::unique_ptr<SortItem[]> items(
                        new SortItem[this->_internal_dimensions().size()]);
                typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
                size_type n = 0;
                for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
                             it = this->_internal_dimensions().begin();
                     it != this->_internal_dimensions().end(); ++it, ++n) {
                    items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
                }
                ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
                for (size_type i = 0; i < n; i++) {
                    target = MetricWriter_DimensionsEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
                    Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
                }
            } else {
                for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
                             it = this->_internal_dimensions().begin();
                     it != this->_internal_dimensions().end(); ++it) {
                    target = MetricWriter_DimensionsEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
                    Utf8Check::Check(&(*it));
                }
            }
        }

        // map<string, double> metrics = 4;
        if (!this->_internal_metrics().empty()) {
            typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_pointer
                    ConstPtr;
            typedef ConstPtr SortItem;
            typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
            struct Utf8Check {
                static void Check(ConstPtr p) {
                    (void)p;
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                            p->first.data(), static_cast<int>(p->first.length()),
                            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                            "ts_proto.MetricWriter.MetricsEntry.key");
                }
            };

            if (stream->IsSerializationDeterministic() &&
                this->_internal_metrics().size() > 1) {
                ::std::unique_ptr<SortItem[]> items(
                        new SortItem[this->_internal_metrics().size()]);
                typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::size_type size_type;
                size_type n = 0;
                for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
                             it = this->_internal_metrics().begin();
                     it != this->_internal_metrics().end(); ++it, ++n) {
                    items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
                }
                ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
                for (size_type i = 0; i < n; i++) {
                    target = MetricWriter_MetricsEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
                    Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
                }
            } else {
                for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
                             it = this->_internal_metrics().begin();
                     it != this->_internal_metrics().end(); ++it) {
                    target = MetricWriter_MetricsEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
                    Utf8Check::Check(&(*it));
                }
            }
        }

        // uint32 timestamp = 5;
        if (this->_internal_timestamp() != 0) {
            target = stream->EnsureSpace(target);
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_timestamp(), target);
        }

        // uint64 metadataUID = 6;
        if (this->_internal_metadatauid() != 0) {
            target = stream->EnsureSpace(target);
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_metadatauid(), target);
        }

        // map<string, uint64> metricUID = 7;
        if (!this->_internal_metricuid().empty()) {
            typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >::const_pointer
                    ConstPtr;
            typedef ConstPtr SortItem;
            typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
            struct Utf8Check {
                static void Check(ConstPtr p) {
                    (void)p;
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                            p->first.data(), static_cast<int>(p->first.length()),
                            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                            "ts_proto.MetricWriter.MetricUIDEntry.key");
                }
            };

            if (stream->IsSerializationDeterministic() &&
                this->_internal_metricuid().size() > 1) {
                ::std::unique_ptr<SortItem[]> items(
                        new SortItem[this->_internal_metricuid().size()]);
                typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >::size_type size_type;
                size_type n = 0;
                for (::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >::const_iterator
                             it = this->_internal_metricuid().begin();
                     it != this->_internal_metricuid().end(); ++it, ++n) {
                    items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
                }
                ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
                for (size_type i = 0; i < n; i++) {
                    target = MetricWriter_MetricUIDEntry_DoNotUse::Funcs::InternalSerialize(7, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
                    Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
                }
            } else {
                for (::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >::const_iterator
                             it = this->_internal_metricuid().begin();
                     it != this->_internal_metricuid().end(); ++it) {
                    target = MetricWriter_MetricUIDEntry_DoNotUse::Funcs::InternalSerialize(7, it->first, it->second, target, stream);
                    Utf8Check::Check(&(*it));
                }
            }
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
                    _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
        }
        // @@protoc_insertion_point(serialize_to_array_end:ts_proto.MetricWriter)
        return target;
    }

    size_t MetricWriter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ts_proto.MetricWriter)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void) cached_has_bits;

        // map<string, string> dimensions = 3;
        total_size += 1 *
                      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_dimensions_size());
        for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
                     it = this->_internal_dimensions().begin();
             it != this->_internal_dimensions().end(); ++it) {
            total_size += MetricWriter_DimensionsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
        }

        // map<string, double> metrics = 4;
        total_size += 1 *
                      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_metrics_size());
        for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
                     it = this->_internal_metrics().begin();
             it != this->_internal_metrics().end(); ++it) {
            total_size += MetricWriter_MetricsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
        }

        // map<string, uint64> metricUID = 7;
        total_size += 1 *
                      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_metricuid_size());
        for (::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >::const_iterator
                     it = this->_internal_metricuid().begin();
             it != this->_internal_metricuid().end(); ++it) {
            total_size += MetricWriter_MetricUIDEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
        }

        // string namespace = 1;
        if (!this->_internal_namespace_().empty()) {
            total_size += 1 +
                          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                  this->_internal_namespace_());
        }

        // string schema = 2;
        if (!this->_internal_schema().empty()) {
            total_size += 1 +
                          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                  this->_internal_schema());
        }

        // uint64 metadataUID = 6;
        if (this->_internal_metadatauid() != 0) {
            total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_metadatauid());
        }

        // uint32 timestamp = 5;
        if (this->_internal_timestamp() != 0) {
            total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MetricWriter::_class_data_ = {
            ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
            MetricWriter::MergeImpl
    };
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MetricWriter::GetClassData() const { return &_class_data_; }

    void MetricWriter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                                 const ::PROTOBUF_NAMESPACE_ID::Message& from) {
        static_cast<MetricWriter *>(to)->MergeFrom(
                static_cast<const MetricWriter &>(from));
    }


    void MetricWriter::MergeFrom(const MetricWriter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ts_proto.MetricWriter)
        GOOGLE_DCHECK_NE(&from, this);
        uint32_t cached_has_bits = 0;
        (void) cached_has_bits;

        dimensions_.MergeFrom(from.dimensions_);
        metrics_.MergeFrom(from.metrics_);
        metricuid_.MergeFrom(from.metricuid_);
        if (!from._internal_namespace_().empty()) {
            _internal_set_namespace_(from._internal_namespace_());
        }
        if (!from._internal_schema().empty()) {
            _internal_set_schema(from._internal_schema());
        }
        if (from._internal_metadatauid() != 0) {
            _internal_set_metadatauid(from._internal_metadatauid());
        }
        if (from._internal_timestamp() != 0) {
            _internal_set_timestamp(from._internal_timestamp());
        }
        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void MetricWriter::CopyFrom(const MetricWriter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ts_proto.MetricWriter)
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    bool MetricWriter::IsInitialized() const {
        return true;
    }

    void MetricWriter::InternalSwap(MetricWriter* other) {
        using std::swap;
        auto* lhs_arena = GetArenaForAllocation();
        auto* rhs_arena = other->GetArenaForAllocation();
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        dimensions_.InternalSwap(&other->dimensions_);
        metrics_.InternalSwap(&other->metrics_);
        metricuid_.InternalSwap(&other->metricuid_);
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
                &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                &namespace__, lhs_arena,
                &other->namespace__, rhs_arena
        );
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
                &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                &schema_, lhs_arena,
                &other->schema_, rhs_arena
        );
        ::PROTOBUF_NAMESPACE_ID::internal::memswap<
                PROTOBUF_FIELD_OFFSET(MetricWriter, timestamp_)
                + sizeof(MetricWriter::timestamp_)
                - PROTOBUF_FIELD_OFFSET(MetricWriter, metadatauid_)>(
                reinterpret_cast<char*>(&metadatauid_),
                reinterpret_cast<char*>(&other->metadatauid_));
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata MetricWriter::GetMetadata() const {
        return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
                &descriptor_table_query_5fwrite_2eproto_getter, &descriptor_table_query_5fwrite_2eproto_once,
                file_level_metadata_query_5fwrite_2eproto[3]);
    }

// ===================================================================

    class WriteResponse::_Internal {
    public:
    };

    WriteResponse::WriteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                                 bool is_message_owned)
            : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
        SharedCtor();
        if (!is_message_owned) {
            RegisterArenaDtor(arena);
        }
        // @@protoc_insertion_point(arena_constructor:ts_proto.WriteResponse)
    }
    WriteResponse::WriteResponse(const WriteResponse& from)
            : ::PROTOBUF_NAMESPACE_ID::Message() {
        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        metrics_received_ = from.metrics_received_;
        // @@protoc_insertion_point(copy_constructor:ts_proto.WriteResponse)
    }

    inline void WriteResponse::SharedCtor() {
        metrics_received_ = 0u;
    }

    WriteResponse::~WriteResponse() {
        // @@protoc_insertion_point(destructor:ts_proto.WriteResponse)
        if (GetArenaForAllocation() != nullptr) return;
        SharedDtor();
        _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    inline void WriteResponse::SharedDtor() {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    }

    void WriteResponse::ArenaDtor(void* object) {
        WriteResponse* _this = reinterpret_cast< WriteResponse* >(object);
        (void)_this;
    }
    void WriteResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
    }
    void WriteResponse::SetCachedSize(int size) const {
        _cached_size_.Set(size);
    }

    void WriteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ts_proto.WriteResponse)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void) cached_has_bits;

        metrics_received_ = 0u;
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* WriteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
        while (!ctx->Done(&ptr)) {
            uint32_t tag;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
            switch (tag >> 3) {
                // uint32 metrics_received = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
                        metrics_received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    } else
                        goto handle_unusual;
                    continue;
                default:
                    goto handle_unusual;
            }  // switch
            handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4)) {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                    tag,
                    _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                    ptr, ctx);
            CHK_(ptr != nullptr);
        }  // while
        message_done:
        return ptr;
        failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* WriteResponse::_InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
        // @@protoc_insertion_point(serialize_to_array_start:ts_proto.WriteResponse)
        uint32_t cached_has_bits = 0;
        (void) cached_has_bits;

        // uint32 metrics_received = 1;
        if (this->_internal_metrics_received() != 0) {
            target = stream->EnsureSpace(target);
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_metrics_received(), target);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
                    _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
        }
        // @@protoc_insertion_point(serialize_to_array_end:ts_proto.WriteResponse)
        return target;
    }

    size_t WriteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ts_proto.WriteResponse)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void) cached_has_bits;

        // uint32 metrics_received = 1;
        if (this->_internal_metrics_received() != 0) {
            total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_metrics_received());
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WriteResponse::_class_data_ = {
            ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
            WriteResponse::MergeImpl
    };
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WriteResponse::GetClassData() const { return &_class_data_; }

    void WriteResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                                  const ::PROTOBUF_NAMESPACE_ID::Message& from) {
        static_cast<WriteResponse *>(to)->MergeFrom(
                static_cast<const WriteResponse &>(from));
    }


    void WriteResponse::MergeFrom(const WriteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ts_proto.WriteResponse)
        GOOGLE_DCHECK_NE(&from, this);
        uint32_t cached_has_bits = 0;
        (void) cached_has_bits;

        if (from._internal_metrics_received() != 0) {
            _internal_set_metrics_received(from._internal_metrics_received());
        }
        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void WriteResponse::CopyFrom(const WriteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ts_proto.WriteResponse)
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    bool WriteResponse::IsInitialized() const {
        return true;
    }

    void WriteResponse::InternalSwap(WriteResponse* other) {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(metrics_received_, other->metrics_received_);
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata WriteResponse::GetMetadata() const {
        return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
                &descriptor_table_query_5fwrite_2eproto_getter, &descriptor_table_query_5fwrite_2eproto_once,
                file_level_metadata_query_5fwrite_2eproto[4]);
    }

// ===================================================================

    MetricsReader_DimensionsEntry_DoNotUse::MetricsReader_DimensionsEntry_DoNotUse() {}
    MetricsReader_DimensionsEntry_DoNotUse::MetricsReader_DimensionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
            : SuperType(arena) {}
    void MetricsReader_DimensionsEntry_DoNotUse::MergeFrom(const MetricsReader_DimensionsEntry_DoNotUse& other) {
        MergeFromInternal(other);
    }
    ::PROTOBUF_NAMESPACE_ID::Metadata MetricsReader_DimensionsEntry_DoNotUse::GetMetadata() const {
        return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
                &descriptor_table_query_5fwrite_2eproto_getter, &descriptor_table_query_5fwrite_2eproto_once,
                file_level_metadata_query_5fwrite_2eproto[5]);
    }

// ===================================================================

    class MetricsReader::_Internal {
    public:
    };

    MetricsReader::MetricsReader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                                 bool is_message_owned)
            : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
              dimensions_(arena) {
        SharedCtor();
        if (!is_message_owned) {
            RegisterArenaDtor(arena);
        }
        // @@protoc_insertion_point(arena_constructor:ts_proto.MetricsReader)
    }
    MetricsReader::MetricsReader(const MetricsReader& from)
            : ::PROTOBUF_NAMESPACE_ID::Message() {
        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        dimensions_.MergeFrom(from.dimensions_);
        metric_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        metric_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (!from._internal_metric_name().empty()) {
            metric_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_metric_name(),
                             GetArenaForAllocation());
        }
        ::memcpy(&query_start_time_, &from.query_start_time_,
                 static_cast<size_t>(reinterpret_cast<char*>(&query_end_time_) -
                                     reinterpret_cast<char*>(&query_start_time_)) + sizeof(query_end_time_));
        // @@protoc_insertion_point(copy_constructor:ts_proto.MetricsReader)
    }

    inline void MetricsReader::SharedCtor() {
        metric_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        metric_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
        ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
                         reinterpret_cast<char*>(&query_start_time_) - reinterpret_cast<char*>(this)),
                 0, static_cast<size_t>(reinterpret_cast<char*>(&query_end_time_) -
                                        reinterpret_cast<char*>(&query_start_time_)) + sizeof(query_end_time_));
    }

    MetricsReader::~MetricsReader() {
        // @@protoc_insertion_point(destructor:ts_proto.MetricsReader)
        if (GetArenaForAllocation() != nullptr) return;
        SharedDtor();
        _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    inline void MetricsReader::SharedDtor() {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
        metric_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }

    void MetricsReader::ArenaDtor(void* object) {
        MetricsReader* _this = reinterpret_cast< MetricsReader* >(object);
        (void)_this;
        _this->dimensions_. ~MapField();
    }
    inline void MetricsReader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
        if (arena != nullptr) {
            arena->OwnCustomDestructor(this, &MetricsReader::ArenaDtor);
        }
    }
    void MetricsReader::SetCachedSize(int size) const {
        _cached_size_.Set(size);
    }

    void MetricsReader::Clear() {
// @@protoc_insertion_point(message_clear_start:ts_proto.MetricsReader)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void) cached_has_bits;

        dimensions_.Clear();
        metric_name_.ClearToEmpty();
        ::memset(&query_start_time_, 0, static_cast<size_t>(
                                                reinterpret_cast<char*>(&query_end_time_) -
                                                reinterpret_cast<char*>(&query_start_time_)) + sizeof(query_end_time_));
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* MetricsReader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
        while (!ctx->Done(&ptr)) {
            uint32_t tag;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
            switch (tag >> 3) {
                // string metric_name = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
                        auto str = _internal_mutable_metric_name();
                        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
                        CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ts_proto.MetricsReader.metric_name"));
                        CHK_(ptr);
                    } else
                        goto handle_unusual;
                    continue;
                    // map<string, string> dimensions = 2;
                case 2:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
                        ptr -= 1;
                        do {
                            ptr += 1;
                            ptr = ctx->ParseMessage(&dimensions_, ptr);
                            CHK_(ptr);
                            if (!ctx->DataAvailable(ptr)) break;
                        } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
                    } else
                        goto handle_unusual;
                    continue;
                    // uint32 query_start_time = 3;
                case 3:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
                        query_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    } else
                        goto handle_unusual;
                    continue;
                    // uint32 query_end_time = 4;
                case 4:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
                        query_end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    } else
                        goto handle_unusual;
                    continue;
                default:
                    goto handle_unusual;
            }  // switch
            handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4)) {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                    tag,
                    _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                    ptr, ctx);
            CHK_(ptr != nullptr);
        }  // while
        message_done:
        return ptr;
        failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* MetricsReader::_InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
        // @@protoc_insertion_point(serialize_to_array_start:ts_proto.MetricsReader)
        uint32_t cached_has_bits = 0;
        (void) cached_has_bits;

        // string metric_name = 1;
        if (!this->_internal_metric_name().empty()) {
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                    this->_internal_metric_name().data(), static_cast<int>(this->_internal_metric_name().length()),
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                    "ts_proto.MetricsReader.metric_name");
            target = stream->WriteStringMaybeAliased(
                    1, this->_internal_metric_name(), target);
        }

        // map<string, string> dimensions = 2;
        if (!this->_internal_dimensions().empty()) {
            typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
                    ConstPtr;
            typedef ConstPtr SortItem;
            typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
            struct Utf8Check {
                static void Check(ConstPtr p) {
                    (void)p;
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                            p->first.data(), static_cast<int>(p->first.length()),
                            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                            "ts_proto.MetricsReader.DimensionsEntry.key");
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                            p->second.data(), static_cast<int>(p->second.length()),
                            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                            "ts_proto.MetricsReader.DimensionsEntry.value");
                }
            };

            if (stream->IsSerializationDeterministic() &&
                this->_internal_dimensions().size() > 1) {
                ::std::unique_ptr<SortItem[]> items(
                        new SortItem[this->_internal_dimensions().size()]);
                typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
                size_type n = 0;
                for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
                             it = this->_internal_dimensions().begin();
                     it != this->_internal_dimensions().end(); ++it, ++n) {
                    items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
                }
                ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
                for (size_type i = 0; i < n; i++) {
                    target = MetricsReader_DimensionsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
                    Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
                }
            } else {
                for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
                             it = this->_internal_dimensions().begin();
                     it != this->_internal_dimensions().end(); ++it) {
                    target = MetricsReader_DimensionsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
                    Utf8Check::Check(&(*it));
                }
            }
        }

        // uint32 query_start_time = 3;
        if (this->_internal_query_start_time() != 0) {
            target = stream->EnsureSpace(target);
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_query_start_time(), target);
        }

        // uint32 query_end_time = 4;
        if (this->_internal_query_end_time() != 0) {
            target = stream->EnsureSpace(target);
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_query_end_time(), target);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
                    _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
        }
        // @@protoc_insertion_point(serialize_to_array_end:ts_proto.MetricsReader)
        return target;
    }

    size_t MetricsReader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ts_proto.MetricsReader)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void) cached_has_bits;

        // map<string, string> dimensions = 2;
        total_size += 1 *
                      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_dimensions_size());
        for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
                     it = this->_internal_dimensions().begin();
             it != this->_internal_dimensions().end(); ++it) {
            total_size += MetricsReader_DimensionsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
        }

        // string metric_name = 1;
        if (!this->_internal_metric_name().empty()) {
            total_size += 1 +
                          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                  this->_internal_metric_name());
        }

        // uint32 query_start_time = 3;
        if (this->_internal_query_start_time() != 0) {
            total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_query_start_time());
        }

        // uint32 query_end_time = 4;
        if (this->_internal_query_end_time() != 0) {
            total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_query_end_time());
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MetricsReader::_class_data_ = {
            ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
            MetricsReader::MergeImpl
    };
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MetricsReader::GetClassData() const { return &_class_data_; }

    void MetricsReader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                                  const ::PROTOBUF_NAMESPACE_ID::Message& from) {
        static_cast<MetricsReader *>(to)->MergeFrom(
                static_cast<const MetricsReader &>(from));
    }


    void MetricsReader::MergeFrom(const MetricsReader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ts_proto.MetricsReader)
        GOOGLE_DCHECK_NE(&from, this);
        uint32_t cached_has_bits = 0;
        (void) cached_has_bits;

        dimensions_.MergeFrom(from.dimensions_);
        if (!from._internal_metric_name().empty()) {
            _internal_set_metric_name(from._internal_metric_name());
        }
        if (from._internal_query_start_time() != 0) {
            _internal_set_query_start_time(from._internal_query_start_time());
        }
        if (from._internal_query_end_time() != 0) {
            _internal_set_query_end_time(from._internal_query_end_time());
        }
        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void MetricsReader::CopyFrom(const MetricsReader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ts_proto.MetricsReader)
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    bool MetricsReader::IsInitialized() const {
        return true;
    }

    void MetricsReader::InternalSwap(MetricsReader* other) {
        using std::swap;
        auto* lhs_arena = GetArenaForAllocation();
        auto* rhs_arena = other->GetArenaForAllocation();
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        dimensions_.InternalSwap(&other->dimensions_);
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
                &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                &metric_name_, lhs_arena,
                &other->metric_name_, rhs_arena
        );
        ::PROTOBUF_NAMESPACE_ID::internal::memswap<
                PROTOBUF_FIELD_OFFSET(MetricsReader, query_end_time_)
                + sizeof(MetricsReader::query_end_time_)
                - PROTOBUF_FIELD_OFFSET(MetricsReader, query_start_time_)>(
                reinterpret_cast<char*>(&query_start_time_),
                reinterpret_cast<char*>(&other->query_start_time_));
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata MetricsReader::GetMetadata() const {
        return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
                &descriptor_table_query_5fwrite_2eproto_getter, &descriptor_table_query_5fwrite_2eproto_once,
                file_level_metadata_query_5fwrite_2eproto[6]);
    }

// ===================================================================

    class ReaderResponse::_Internal {
    public:
    };

    ReaderResponse::ReaderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                                   bool is_message_owned)
            : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
              points_(arena) {
        SharedCtor();
        if (!is_message_owned) {
            RegisterArenaDtor(arena);
        }
        // @@protoc_insertion_point(arena_constructor:ts_proto.ReaderResponse)
    }
    ReaderResponse::ReaderResponse(const ReaderResponse& from)
            : ::PROTOBUF_NAMESPACE_ID::Message(),
              points_(from.points_) {
        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        // @@protoc_insertion_point(copy_constructor:ts_proto.ReaderResponse)
    }

    inline void ReaderResponse::SharedCtor() {
    }

    ReaderResponse::~ReaderResponse() {
        // @@protoc_insertion_point(destructor:ts_proto.ReaderResponse)
        if (GetArenaForAllocation() != nullptr) return;
        SharedDtor();
        _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    inline void ReaderResponse::SharedDtor() {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    }

    void ReaderResponse::ArenaDtor(void* object) {
        ReaderResponse* _this = reinterpret_cast< ReaderResponse* >(object);
        (void)_this;
    }
    void ReaderResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
    }
    void ReaderResponse::SetCachedSize(int size) const {
        _cached_size_.Set(size);
    }

    void ReaderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ts_proto.ReaderResponse)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void) cached_has_bits;

        points_.Clear();
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* ReaderResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
        while (!ctx->Done(&ptr)) {
            uint32_t tag;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
            switch (tag >> 3) {
                // repeated .ts_proto.Timeseries points = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
                        ptr -= 1;
                        do {
                            ptr += 1;
                            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
                            CHK_(ptr);
                            if (!ctx->DataAvailable(ptr)) break;
                        } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
                    } else
                        goto handle_unusual;
                    continue;
                default:
                    goto handle_unusual;
            }  // switch
            handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4)) {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                    tag,
                    _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                    ptr, ctx);
            CHK_(ptr != nullptr);
        }  // while
        message_done:
        return ptr;
        failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* ReaderResponse::_InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
        // @@protoc_insertion_point(serialize_to_array_start:ts_proto.ReaderResponse)
        uint32_t cached_has_bits = 0;
        (void) cached_has_bits;

        // repeated .ts_proto.Timeseries points = 1;
        for (unsigned int i = 0,
                     n = static_cast<unsigned int>(this->_internal_points_size()); i < n; i++) {
            target = stream->EnsureSpace(target);
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessage(1, this->_internal_points(i), target, stream);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
                    _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
        }
        // @@protoc_insertion_point(serialize_to_array_end:ts_proto.ReaderResponse)
        return target;
    }

    size_t ReaderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ts_proto.ReaderResponse)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void) cached_has_bits;

        // repeated .ts_proto.Timeseries points = 1;
        total_size += 1UL * this->_internal_points_size();
        for (const auto& msg : this->points_) {
            total_size +=
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReaderResponse::_class_data_ = {
            ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
            ReaderResponse::MergeImpl
    };
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReaderResponse::GetClassData() const { return &_class_data_; }

    void ReaderResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                                   const ::PROTOBUF_NAMESPACE_ID::Message& from) {
        static_cast<ReaderResponse *>(to)->MergeFrom(
                static_cast<const ReaderResponse &>(from));
    }


    void ReaderResponse::MergeFrom(const ReaderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ts_proto.ReaderResponse)
        GOOGLE_DCHECK_NE(&from, this);
        uint32_t cached_has_bits = 0;
        (void) cached_has_bits;

        points_.MergeFrom(from.points_);
        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void ReaderResponse::CopyFrom(const ReaderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ts_proto.ReaderResponse)
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    bool ReaderResponse::IsInitialized() const {
        return true;
    }

    void ReaderResponse::InternalSwap(ReaderResponse* other) {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        points_.InternalSwap(&other->points_);
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata ReaderResponse::GetMetadata() const {
        return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
                &descriptor_table_query_5fwrite_2eproto_getter, &descriptor_table_query_5fwrite_2eproto_once,
                file_level_metadata_query_5fwrite_2eproto[7]);
    }

// ===================================================================

    Timeseries_DimensionsEntry_DoNotUse::Timeseries_DimensionsEntry_DoNotUse() {}
    Timeseries_DimensionsEntry_DoNotUse::Timeseries_DimensionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
            : SuperType(arena) {}
    void Timeseries_DimensionsEntry_DoNotUse::MergeFrom(const Timeseries_DimensionsEntry_DoNotUse& other) {
        MergeFromInternal(other);
    }
    ::PROTOBUF_NAMESPACE_ID::Metadata Timeseries_DimensionsEntry_DoNotUse::GetMetadata() const {
        return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
                &descriptor_table_query_5fwrite_2eproto_getter, &descriptor_table_query_5fwrite_2eproto_once,
                file_level_metadata_query_5fwrite_2eproto[8]);
    }

// ===================================================================

    class Timeseries::_Internal {
    public:
    };

    Timeseries::Timeseries(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                           bool is_message_owned)
            : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
              dimensions_(arena),
              points_(arena) {
        SharedCtor();
        if (!is_message_owned) {
            RegisterArenaDtor(arena);
        }
        // @@protoc_insertion_point(arena_constructor:ts_proto.Timeseries)
    }
    Timeseries::Timeseries(const Timeseries& from)
            : ::PROTOBUF_NAMESPACE_ID::Message(),
              points_(from.points_) {
        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        dimensions_.MergeFrom(from.dimensions_);
        // @@protoc_insertion_point(copy_constructor:ts_proto.Timeseries)
    }

    inline void Timeseries::SharedCtor() {
    }

    Timeseries::~Timeseries() {
        // @@protoc_insertion_point(destructor:ts_proto.Timeseries)
        if (GetArenaForAllocation() != nullptr) return;
        SharedDtor();
        _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    inline void Timeseries::SharedDtor() {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    }

    void Timeseries::ArenaDtor(void* object) {
        Timeseries* _this = reinterpret_cast< Timeseries* >(object);
        (void)_this;
        _this->dimensions_. ~MapField();
    }
    inline void Timeseries::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
        if (arena != nullptr) {
            arena->OwnCustomDestructor(this, &Timeseries::ArenaDtor);
        }
    }
    void Timeseries::SetCachedSize(int size) const {
        _cached_size_.Set(size);
    }

    void Timeseries::Clear() {
// @@protoc_insertion_point(message_clear_start:ts_proto.Timeseries)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void) cached_has_bits;

        dimensions_.Clear();
        points_.Clear();
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* Timeseries::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
        while (!ctx->Done(&ptr)) {
            uint32_t tag;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
            switch (tag >> 3) {
                // map<string, string> dimensions = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
                        ptr -= 1;
                        do {
                            ptr += 1;
                            ptr = ctx->ParseMessage(&dimensions_, ptr);
                            CHK_(ptr);
                            if (!ctx->DataAvailable(ptr)) break;
                        } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
                    } else
                        goto handle_unusual;
                    continue;
                    // repeated .ts_proto.TimeseriesPoint points = 2;
                case 2:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
                        ptr -= 1;
                        do {
                            ptr += 1;
                            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
                            CHK_(ptr);
                            if (!ctx->DataAvailable(ptr)) break;
                        } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
                    } else
                        goto handle_unusual;
                    continue;
                default:
                    goto handle_unusual;
            }  // switch
            handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4)) {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                    tag,
                    _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                    ptr, ctx);
            CHK_(ptr != nullptr);
        }  // while
        message_done:
        return ptr;
        failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* Timeseries::_InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
        // @@protoc_insertion_point(serialize_to_array_start:ts_proto.Timeseries)
        uint32_t cached_has_bits = 0;
        (void) cached_has_bits;

        // map<string, string> dimensions = 1;
        if (!this->_internal_dimensions().empty()) {
            typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
                    ConstPtr;
            typedef ConstPtr SortItem;
            typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
            struct Utf8Check {
                static void Check(ConstPtr p) {
                    (void)p;
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                            p->first.data(), static_cast<int>(p->first.length()),
                            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                            "ts_proto.Timeseries.DimensionsEntry.key");
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                            p->second.data(), static_cast<int>(p->second.length()),
                            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                            "ts_proto.Timeseries.DimensionsEntry.value");
                }
            };

            if (stream->IsSerializationDeterministic() &&
                this->_internal_dimensions().size() > 1) {
                ::std::unique_ptr<SortItem[]> items(
                        new SortItem[this->_internal_dimensions().size()]);
                typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
                size_type n = 0;
                for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
                             it = this->_internal_dimensions().begin();
                     it != this->_internal_dimensions().end(); ++it, ++n) {
                    items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
                }
                ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
                for (size_type i = 0; i < n; i++) {
                    target = Timeseries_DimensionsEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
                    Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
                }
            } else {
                for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
                             it = this->_internal_dimensions().begin();
                     it != this->_internal_dimensions().end(); ++it) {
                    target = Timeseries_DimensionsEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
                    Utf8Check::Check(&(*it));
                }
            }
        }

        // repeated .ts_proto.TimeseriesPoint points = 2;
        for (unsigned int i = 0,
                     n = static_cast<unsigned int>(this->_internal_points_size()); i < n; i++) {
            target = stream->EnsureSpace(target);
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessage(2, this->_internal_points(i), target, stream);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
                    _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
        }
        // @@protoc_insertion_point(serialize_to_array_end:ts_proto.Timeseries)
        return target;
    }

    size_t Timeseries::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ts_proto.Timeseries)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void) cached_has_bits;

        // map<string, string> dimensions = 1;
        total_size += 1 *
                      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_dimensions_size());
        for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
                     it = this->_internal_dimensions().begin();
             it != this->_internal_dimensions().end(); ++it) {
            total_size += Timeseries_DimensionsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
        }

        // repeated .ts_proto.TimeseriesPoint points = 2;
        total_size += 1UL * this->_internal_points_size();
        for (const auto& msg : this->points_) {
            total_size +=
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Timeseries::_class_data_ = {
            ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
            Timeseries::MergeImpl
    };
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Timeseries::GetClassData() const { return &_class_data_; }

    void Timeseries::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                               const ::PROTOBUF_NAMESPACE_ID::Message& from) {
        static_cast<Timeseries *>(to)->MergeFrom(
                static_cast<const Timeseries &>(from));
    }


    void Timeseries::MergeFrom(const Timeseries& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ts_proto.Timeseries)
        GOOGLE_DCHECK_NE(&from, this);
        uint32_t cached_has_bits = 0;
        (void) cached_has_bits;

        dimensions_.MergeFrom(from.dimensions_);
        points_.MergeFrom(from.points_);
        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void Timeseries::CopyFrom(const Timeseries& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ts_proto.Timeseries)
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    bool Timeseries::IsInitialized() const {
        return true;
    }

    void Timeseries::InternalSwap(Timeseries* other) {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        dimensions_.InternalSwap(&other->dimensions_);
        points_.InternalSwap(&other->points_);
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata Timeseries::GetMetadata() const {
        return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
                &descriptor_table_query_5fwrite_2eproto_getter, &descriptor_table_query_5fwrite_2eproto_once,
                file_level_metadata_query_5fwrite_2eproto[9]);
    }

// ===================================================================

    class TimeseriesPoint::_Internal {
    public:
    };

    TimeseriesPoint::TimeseriesPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                                     bool is_message_owned)
            : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
        SharedCtor();
        if (!is_message_owned) {
            RegisterArenaDtor(arena);
        }
        // @@protoc_insertion_point(arena_constructor:ts_proto.TimeseriesPoint)
    }
    TimeseriesPoint::TimeseriesPoint(const TimeseriesPoint& from)
            : ::PROTOBUF_NAMESPACE_ID::Message() {
        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        ::memcpy(&value_, &from.value_,
                 static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
                                     reinterpret_cast<char*>(&value_)) + sizeof(timestamp_));
        // @@protoc_insertion_point(copy_constructor:ts_proto.TimeseriesPoint)
    }

    inline void TimeseriesPoint::SharedCtor() {
        ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
                         reinterpret_cast<char*>(&value_) - reinterpret_cast<char*>(this)),
                 0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
                                        reinterpret_cast<char*>(&value_)) + sizeof(timestamp_));
    }

    TimeseriesPoint::~TimeseriesPoint() {
        // @@protoc_insertion_point(destructor:ts_proto.TimeseriesPoint)
        if (GetArenaForAllocation() != nullptr) return;
        SharedDtor();
        _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    inline void TimeseriesPoint::SharedDtor() {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    }

    void TimeseriesPoint::ArenaDtor(void* object) {
        TimeseriesPoint* _this = reinterpret_cast< TimeseriesPoint* >(object);
        (void)_this;
    }
    void TimeseriesPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
    }
    void TimeseriesPoint::SetCachedSize(int size) const {
        _cached_size_.Set(size);
    }

    void TimeseriesPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:ts_proto.TimeseriesPoint)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void) cached_has_bits;

        ::memset(&value_, 0, static_cast<size_t>(
                                     reinterpret_cast<char*>(&timestamp_) -
                                     reinterpret_cast<char*>(&value_)) + sizeof(timestamp_));
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* TimeseriesPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
        while (!ctx->Done(&ptr)) {
            uint32_t tag;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
            switch (tag >> 3) {
                // uint32 timestamp = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
                        timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    } else
                        goto handle_unusual;
                    continue;
                    // double value = 2;
                case 2:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
                        value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
                        ptr += sizeof(double);
                    } else
                        goto handle_unusual;
                    continue;
                default:
                    goto handle_unusual;
            }  // switch
            handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4)) {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                    tag,
                    _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                    ptr, ctx);
            CHK_(ptr != nullptr);
        }  // while
        message_done:
        return ptr;
        failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* TimeseriesPoint::_InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
        // @@protoc_insertion_point(serialize_to_array_start:ts_proto.TimeseriesPoint)
        uint32_t cached_has_bits = 0;
        (void) cached_has_bits;

        // uint32 timestamp = 1;
        if (this->_internal_timestamp() != 0) {
            target = stream->EnsureSpace(target);
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_timestamp(), target);
        }

        // double value = 2;
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_value = this->_internal_value();
        uint64_t raw_value;
        memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
        if (raw_value != 0) {
            target = stream->EnsureSpace(target);
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_value(), target);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
                    _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
        }
        // @@protoc_insertion_point(serialize_to_array_end:ts_proto.TimeseriesPoint)
        return target;
    }

    size_t TimeseriesPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ts_proto.TimeseriesPoint)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void) cached_has_bits;

        // double value = 2;
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_value = this->_internal_value();
        uint64_t raw_value;
        memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
        if (raw_value != 0) {
            total_size += 1 + 8;
        }

        // uint32 timestamp = 1;
        if (this->_internal_timestamp() != 0) {
            total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TimeseriesPoint::_class_data_ = {
            ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
            TimeseriesPoint::MergeImpl
    };
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TimeseriesPoint::GetClassData() const { return &_class_data_; }

    void TimeseriesPoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                                    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
        static_cast<TimeseriesPoint *>(to)->MergeFrom(
                static_cast<const TimeseriesPoint &>(from));
    }


    void TimeseriesPoint::MergeFrom(const TimeseriesPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ts_proto.TimeseriesPoint)
        GOOGLE_DCHECK_NE(&from, this);
        uint32_t cached_has_bits = 0;
        (void) cached_has_bits;

        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_value = from._internal_value();
        uint64_t raw_value;
        memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
        if (raw_value != 0) {
            _internal_set_value(from._internal_value());
        }
        if (from._internal_timestamp() != 0) {
            _internal_set_timestamp(from._internal_timestamp());
        }
        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void TimeseriesPoint::CopyFrom(const TimeseriesPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ts_proto.TimeseriesPoint)
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    bool TimeseriesPoint::IsInitialized() const {
        return true;
    }

    void TimeseriesPoint::InternalSwap(TimeseriesPoint* other) {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        ::PROTOBUF_NAMESPACE_ID::internal::memswap<
                PROTOBUF_FIELD_OFFSET(TimeseriesPoint, timestamp_)
                + sizeof(TimeseriesPoint::timestamp_)
                - PROTOBUF_FIELD_OFFSET(TimeseriesPoint, value_)>(
                reinterpret_cast<char*>(&value_),
                reinterpret_cast<char*>(&other->value_));
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata TimeseriesPoint::GetMetadata() const {
        return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
                &descriptor_table_query_5fwrite_2eproto_getter, &descriptor_table_query_5fwrite_2eproto_once,
                file_level_metadata_query_5fwrite_2eproto[10]);
    }

// ===================================================================

    class UIDReader::_Internal {
    public:
    };

    UIDReader::UIDReader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
            : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
        SharedCtor();
        if (!is_message_owned) {
            RegisterArenaDtor(arena);
        }
        // @@protoc_insertion_point(arena_constructor:ts_proto.UIDReader)
    }
    UIDReader::UIDReader(const UIDReader& from)
            : ::PROTOBUF_NAMESPACE_ID::Message() {
        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        ::memcpy(&uid_, &from.uid_,
                 static_cast<size_t>(reinterpret_cast<char*>(&query_end_time_) -
                                     reinterpret_cast<char*>(&uid_)) + sizeof(query_end_time_));
        // @@protoc_insertion_point(copy_constructor:ts_proto.UIDReader)
    }

    inline void UIDReader::SharedCtor() {
        ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
                         reinterpret_cast<char*>(&uid_) - reinterpret_cast<char*>(this)),
                 0, static_cast<size_t>(reinterpret_cast<char*>(&query_end_time_) -
                                        reinterpret_cast<char*>(&uid_)) + sizeof(query_end_time_));
    }

    UIDReader::~UIDReader() {
        // @@protoc_insertion_point(destructor:ts_proto.UIDReader)
        if (GetArenaForAllocation() != nullptr) return;
        SharedDtor();
        _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    inline void UIDReader::SharedDtor() {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    }

    void UIDReader::ArenaDtor(void* object) {
        UIDReader* _this = reinterpret_cast< UIDReader* >(object);
        (void)_this;
    }
    void UIDReader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
    }
    void UIDReader::SetCachedSize(int size) const {
        _cached_size_.Set(size);
    }

    void UIDReader::Clear() {
// @@protoc_insertion_point(message_clear_start:ts_proto.UIDReader)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void) cached_has_bits;

        ::memset(&uid_, 0, static_cast<size_t>(
                                   reinterpret_cast<char*>(&query_end_time_) -
                                   reinterpret_cast<char*>(&uid_)) + sizeof(query_end_time_));
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* UIDReader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
        while (!ctx->Done(&ptr)) {
            uint32_t tag;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
            switch (tag >> 3) {
                // int64 uid = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
                        uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    } else
                        goto handle_unusual;
                    continue;
                    // uint32 query_start_time = 2;
                case 2:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
                        query_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    } else
                        goto handle_unusual;
                    continue;
                    // uint32 query_end_time = 3;
                case 3:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
                        query_end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    } else
                        goto handle_unusual;
                    continue;
                default:
                    goto handle_unusual;
            }  // switch
            handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4)) {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                    tag,
                    _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                    ptr, ctx);
            CHK_(ptr != nullptr);
        }  // while
        message_done:
        return ptr;
        failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* UIDReader::_InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
        // @@protoc_insertion_point(serialize_to_array_start:ts_proto.UIDReader)
        uint32_t cached_has_bits = 0;
        (void) cached_has_bits;

        // int64 uid = 1;
        if (this->_internal_uid() != 0) {
            target = stream->EnsureSpace(target);
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_uid(), target);
        }

        // uint32 query_start_time = 2;
        if (this->_internal_query_start_time() != 0) {
            target = stream->EnsureSpace(target);
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_query_start_time(), target);
        }

        // uint32 query_end_time = 3;
        if (this->_internal_query_end_time() != 0) {
            target = stream->EnsureSpace(target);
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_query_end_time(), target);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
                    _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
        }
        // @@protoc_insertion_point(serialize_to_array_end:ts_proto.UIDReader)
        return target;
    }

    size_t UIDReader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ts_proto.UIDReader)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void) cached_has_bits;

        // int64 uid = 1;
        if (this->_internal_uid() != 0) {
            total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_uid());
        }

        // uint32 query_start_time = 2;
        if (this->_internal_query_start_time() != 0) {
            total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_query_start_time());
        }

        // uint32 query_end_time = 3;
        if (this->_internal_query_end_time() != 0) {
            total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_query_end_time());
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UIDReader::_class_data_ = {
            ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
            UIDReader::MergeImpl
    };
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UIDReader::GetClassData() const { return &_class_data_; }

    void UIDReader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                              const ::PROTOBUF_NAMESPACE_ID::Message& from) {
        static_cast<UIDReader *>(to)->MergeFrom(
                static_cast<const UIDReader &>(from));
    }


    void UIDReader::MergeFrom(const UIDReader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ts_proto.UIDReader)
        GOOGLE_DCHECK_NE(&from, this);
        uint32_t cached_has_bits = 0;
        (void) cached_has_bits;

        if (from._internal_uid() != 0) {
            _internal_set_uid(from._internal_uid());
        }
        if (from._internal_query_start_time() != 0) {
            _internal_set_query_start_time(from._internal_query_start_time());
        }
        if (from._internal_query_end_time() != 0) {
            _internal_set_query_end_time(from._internal_query_end_time());
        }
        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void UIDReader::CopyFrom(const UIDReader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ts_proto.UIDReader)
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    bool UIDReader::IsInitialized() const {
        return true;
    }

    void UIDReader::InternalSwap(UIDReader* other) {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        ::PROTOBUF_NAMESPACE_ID::internal::memswap<
                PROTOBUF_FIELD_OFFSET(UIDReader, query_end_time_)
                + sizeof(UIDReader::query_end_time_)
                - PROTOBUF_FIELD_OFFSET(UIDReader, uid_)>(
                reinterpret_cast<char*>(&uid_),
                reinterpret_cast<char*>(&other->uid_));
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata UIDReader::GetMetadata() const {
        return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
                &descriptor_table_query_5fwrite_2eproto_getter, &descriptor_table_query_5fwrite_2eproto_once,
                file_level_metadata_query_5fwrite_2eproto[11]);
    }

// @@protoc_insertion_point(namespace_scope)
}  // namespace ts_proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ts_proto::MetricWriter_DimensionsEntry_DoNotUse* Arena::CreateMaybeMessage< ::ts_proto::MetricWriter_DimensionsEntry_DoNotUse >(Arena* arena) {
    return Arena::CreateMessageInternal< ::ts_proto::MetricWriter_DimensionsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ts_proto::MetricWriter_MetricsEntry_DoNotUse* Arena::CreateMaybeMessage< ::ts_proto::MetricWriter_MetricsEntry_DoNotUse >(Arena* arena) {
    return Arena::CreateMessageInternal< ::ts_proto::MetricWriter_MetricsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ts_proto::MetricWriter_MetricUIDEntry_DoNotUse* Arena::CreateMaybeMessage< ::ts_proto::MetricWriter_MetricUIDEntry_DoNotUse >(Arena* arena) {
    return Arena::CreateMessageInternal< ::ts_proto::MetricWriter_MetricUIDEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ts_proto::MetricWriter* Arena::CreateMaybeMessage< ::ts_proto::MetricWriter >(Arena* arena) {
    return Arena::CreateMessageInternal< ::ts_proto::MetricWriter >(arena);
}
template<> PROTOBUF_NOINLINE ::ts_proto::WriteResponse* Arena::CreateMaybeMessage< ::ts_proto::WriteResponse >(Arena* arena) {
    return Arena::CreateMessageInternal< ::ts_proto::WriteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ts_proto::MetricsReader_DimensionsEntry_DoNotUse* Arena::CreateMaybeMessage< ::ts_proto::MetricsReader_DimensionsEntry_DoNotUse >(Arena* arena) {
    return Arena::CreateMessageInternal< ::ts_proto::MetricsReader_DimensionsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ts_proto::MetricsReader* Arena::CreateMaybeMessage< ::ts_proto::MetricsReader >(Arena* arena) {
    return Arena::CreateMessageInternal< ::ts_proto::MetricsReader >(arena);
}
template<> PROTOBUF_NOINLINE ::ts_proto::ReaderResponse* Arena::CreateMaybeMessage< ::ts_proto::ReaderResponse >(Arena* arena) {
    return Arena::CreateMessageInternal< ::ts_proto::ReaderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ts_proto::Timeseries_DimensionsEntry_DoNotUse* Arena::CreateMaybeMessage< ::ts_proto::Timeseries_DimensionsEntry_DoNotUse >(Arena* arena) {
    return Arena::CreateMessageInternal< ::ts_proto::Timeseries_DimensionsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ts_proto::Timeseries* Arena::CreateMaybeMessage< ::ts_proto::Timeseries >(Arena* arena) {
    return Arena::CreateMessageInternal< ::ts_proto::Timeseries >(arena);
}
template<> PROTOBUF_NOINLINE ::ts_proto::TimeseriesPoint* Arena::CreateMaybeMessage< ::ts_proto::TimeseriesPoint >(Arena* arena) {
    return Arena::CreateMessageInternal< ::ts_proto::TimeseriesPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::ts_proto::UIDReader* Arena::CreateMaybeMessage< ::ts_proto::UIDReader >(Arena* arena) {
    return Arena::CreateMessageInternal< ::ts_proto::UIDReader >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
