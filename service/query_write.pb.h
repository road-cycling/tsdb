// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: query_write.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_query_5fwrite_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_query_5fwrite_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_query_5fwrite_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
    class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_query_5fwrite_2eproto {
    static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
    static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
    static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
    static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
    static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
    static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_query_5fwrite_2eproto;
namespace ts_proto {
    class MetricWriter;
    struct MetricWriterDefaultTypeInternal;
    extern MetricWriterDefaultTypeInternal _MetricWriter_default_instance_;
    class MetricWriter_DimensionsEntry_DoNotUse;
    struct MetricWriter_DimensionsEntry_DoNotUseDefaultTypeInternal;
    extern MetricWriter_DimensionsEntry_DoNotUseDefaultTypeInternal _MetricWriter_DimensionsEntry_DoNotUse_default_instance_;
    class MetricWriter_MetricUIDEntry_DoNotUse;
    struct MetricWriter_MetricUIDEntry_DoNotUseDefaultTypeInternal;
    extern MetricWriter_MetricUIDEntry_DoNotUseDefaultTypeInternal _MetricWriter_MetricUIDEntry_DoNotUse_default_instance_;
    class MetricWriter_MetricsEntry_DoNotUse;
    struct MetricWriter_MetricsEntry_DoNotUseDefaultTypeInternal;
    extern MetricWriter_MetricsEntry_DoNotUseDefaultTypeInternal _MetricWriter_MetricsEntry_DoNotUse_default_instance_;
    class MetricsReader;
    struct MetricsReaderDefaultTypeInternal;
    extern MetricsReaderDefaultTypeInternal _MetricsReader_default_instance_;
    class MetricsReader_DimensionsEntry_DoNotUse;
    struct MetricsReader_DimensionsEntry_DoNotUseDefaultTypeInternal;
    extern MetricsReader_DimensionsEntry_DoNotUseDefaultTypeInternal _MetricsReader_DimensionsEntry_DoNotUse_default_instance_;
    class ReaderResponse;
    struct ReaderResponseDefaultTypeInternal;
    extern ReaderResponseDefaultTypeInternal _ReaderResponse_default_instance_;
    class Timeseries;
    struct TimeseriesDefaultTypeInternal;
    extern TimeseriesDefaultTypeInternal _Timeseries_default_instance_;
    class TimeseriesPoint;
    struct TimeseriesPointDefaultTypeInternal;
    extern TimeseriesPointDefaultTypeInternal _TimeseriesPoint_default_instance_;
    class Timeseries_DimensionsEntry_DoNotUse;
    struct Timeseries_DimensionsEntry_DoNotUseDefaultTypeInternal;
    extern Timeseries_DimensionsEntry_DoNotUseDefaultTypeInternal _Timeseries_DimensionsEntry_DoNotUse_default_instance_;
    class UIDReader;
    struct UIDReaderDefaultTypeInternal;
    extern UIDReaderDefaultTypeInternal _UIDReader_default_instance_;
    class WriteResponse;
    struct WriteResponseDefaultTypeInternal;
    extern WriteResponseDefaultTypeInternal _WriteResponse_default_instance_;
}  // namespace ts_proto
PROTOBUF_NAMESPACE_OPEN
template<> ::ts_proto::MetricWriter* Arena::CreateMaybeMessage<::ts_proto::MetricWriter>(Arena*);
template<> ::ts_proto::MetricWriter_DimensionsEntry_DoNotUse* Arena::CreateMaybeMessage<::ts_proto::MetricWriter_DimensionsEntry_DoNotUse>(Arena*);
template<> ::ts_proto::MetricWriter_MetricUIDEntry_DoNotUse* Arena::CreateMaybeMessage<::ts_proto::MetricWriter_MetricUIDEntry_DoNotUse>(Arena*);
template<> ::ts_proto::MetricWriter_MetricsEntry_DoNotUse* Arena::CreateMaybeMessage<::ts_proto::MetricWriter_MetricsEntry_DoNotUse>(Arena*);
template<> ::ts_proto::MetricsReader* Arena::CreateMaybeMessage<::ts_proto::MetricsReader>(Arena*);
template<> ::ts_proto::MetricsReader_DimensionsEntry_DoNotUse* Arena::CreateMaybeMessage<::ts_proto::MetricsReader_DimensionsEntry_DoNotUse>(Arena*);
template<> ::ts_proto::ReaderResponse* Arena::CreateMaybeMessage<::ts_proto::ReaderResponse>(Arena*);
template<> ::ts_proto::Timeseries* Arena::CreateMaybeMessage<::ts_proto::Timeseries>(Arena*);
template<> ::ts_proto::TimeseriesPoint* Arena::CreateMaybeMessage<::ts_proto::TimeseriesPoint>(Arena*);
template<> ::ts_proto::Timeseries_DimensionsEntry_DoNotUse* Arena::CreateMaybeMessage<::ts_proto::Timeseries_DimensionsEntry_DoNotUse>(Arena*);
template<> ::ts_proto::UIDReader* Arena::CreateMaybeMessage<::ts_proto::UIDReader>(Arena*);
template<> ::ts_proto::WriteResponse* Arena::CreateMaybeMessage<::ts_proto::WriteResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ts_proto {

// ===================================================================

    class MetricWriter_DimensionsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MetricWriter_DimensionsEntry_DoNotUse,
            std::string, std::string,
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
    public:
        typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MetricWriter_DimensionsEntry_DoNotUse,
                std::string, std::string,
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
        MetricWriter_DimensionsEntry_DoNotUse();
        explicit constexpr MetricWriter_DimensionsEntry_DoNotUse(
                ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
        explicit MetricWriter_DimensionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
        void MergeFrom(const MetricWriter_DimensionsEntry_DoNotUse& other);
        static const MetricWriter_DimensionsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MetricWriter_DimensionsEntry_DoNotUse*>(&_MetricWriter_DimensionsEntry_DoNotUse_default_instance_); }
        static bool ValidateKey(std::string* s) {
            return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "ts_proto.MetricWriter.DimensionsEntry.key");
        }
        static bool ValidateValue(std::string* s) {
            return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "ts_proto.MetricWriter.DimensionsEntry.value");
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
    };

// -------------------------------------------------------------------

    class MetricWriter_MetricsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MetricWriter_MetricsEntry_DoNotUse,
            std::string, double,
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE> {
    public:
        typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MetricWriter_MetricsEntry_DoNotUse,
                std::string, double,
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE> SuperType;
        MetricWriter_MetricsEntry_DoNotUse();
        explicit constexpr MetricWriter_MetricsEntry_DoNotUse(
                ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
        explicit MetricWriter_MetricsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
        void MergeFrom(const MetricWriter_MetricsEntry_DoNotUse& other);
        static const MetricWriter_MetricsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MetricWriter_MetricsEntry_DoNotUse*>(&_MetricWriter_MetricsEntry_DoNotUse_default_instance_); }
        static bool ValidateKey(std::string* s) {
            return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "ts_proto.MetricWriter.MetricsEntry.key");
        }
        static bool ValidateValue(void*) { return true; }
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
    };

// -------------------------------------------------------------------

    class MetricWriter_MetricUIDEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MetricWriter_MetricUIDEntry_DoNotUse,
            std::string, uint64_t,
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64> {
    public:
        typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MetricWriter_MetricUIDEntry_DoNotUse,
                std::string, uint64_t,
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64> SuperType;
        MetricWriter_MetricUIDEntry_DoNotUse();
        explicit constexpr MetricWriter_MetricUIDEntry_DoNotUse(
                ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
        explicit MetricWriter_MetricUIDEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
        void MergeFrom(const MetricWriter_MetricUIDEntry_DoNotUse& other);
        static const MetricWriter_MetricUIDEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MetricWriter_MetricUIDEntry_DoNotUse*>(&_MetricWriter_MetricUIDEntry_DoNotUse_default_instance_); }
        static bool ValidateKey(std::string* s) {
            return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "ts_proto.MetricWriter.MetricUIDEntry.key");
        }
        static bool ValidateValue(void*) { return true; }
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
    };

// -------------------------------------------------------------------

    class MetricWriter final :
            public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ts_proto.MetricWriter) */ {
    public:
        inline MetricWriter() : MetricWriter(nullptr) {}
        ~MetricWriter() override;
        explicit constexpr MetricWriter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        MetricWriter(const MetricWriter& from);
        MetricWriter(MetricWriter&& from) noexcept
                : MetricWriter() {
            *this = ::std::move(from);
        }

        inline MetricWriter& operator=(const MetricWriter& from) {
            CopyFrom(from);
            return *this;
        }
        inline MetricWriter& operator=(MetricWriter&& from) noexcept {
            if (this == &from) return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
                    ) {
                InternalSwap(&from);
            } else {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
            return default_instance().GetMetadata().reflection;
        }
        static const MetricWriter& default_instance() {
            return *internal_default_instance();
        }
        static inline const MetricWriter* internal_default_instance() {
            return reinterpret_cast<const MetricWriter*>(
                    &_MetricWriter_default_instance_);
        }
        static constexpr int kIndexInFileMessages =
                3;

        friend void swap(MetricWriter& a, MetricWriter& b) {
            a.Swap(&b);
        }
        inline void Swap(MetricWriter* other) {
            if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
#else  // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            } else {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(MetricWriter* other) {
            if (other == this) return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        MetricWriter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
            return CreateMaybeMessage<MetricWriter>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const MetricWriter& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const MetricWriter& from);
    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
                uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
        int GetCachedSize() const final { return _cached_size_.Get(); }

    private:
        void SharedCtor();
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(MetricWriter* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
            return "ts_proto.MetricWriter";
        }
    protected:
        explicit MetricWriter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                              bool is_message_owned = false);
    private:
        static void ArenaDtor(void* object);
        inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
    public:

        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------


        // accessors -------------------------------------------------------

        enum : int {
            kDimensionsFieldNumber = 3,
            kMetricsFieldNumber = 4,
            kMetricUIDFieldNumber = 7,
            kNamespaceFieldNumber = 1,
            kSchemaFieldNumber = 2,
            kMetadataUIDFieldNumber = 6,
            kTimestampFieldNumber = 5,
        };
        // map<string, string> dimensions = 3;
        int dimensions_size() const;
    private:
        int _internal_dimensions_size() const;
    public:
        void clear_dimensions();
    private:
        const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
        _internal_dimensions() const;
        ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
        _internal_mutable_dimensions();
    public:
        const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
        dimensions() const;
        ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
        mutable_dimensions();

        // map<string, double> metrics = 4;
        int metrics_size() const;
    private:
        int _internal_metrics_size() const;
    public:
        void clear_metrics();
    private:
        const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
        _internal_metrics() const;
        ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
        _internal_mutable_metrics();
    public:
        const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
        metrics() const;
        ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
        mutable_metrics();

        // map<string, uint64> metricUID = 7;
        int metricuid_size() const;
    private:
        int _internal_metricuid_size() const;
    public:
        void clear_metricuid();
    private:
        const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >&
        _internal_metricuid() const;
        ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >*
        _internal_mutable_metricuid();
    public:
        const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >&
        metricuid() const;
        ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >*
        mutable_metricuid();

        // string namespace = 1;
        void clear_namespace_();
        const std::string& namespace_() const;
        template <typename ArgT0 = const std::string&, typename... ArgT>
        void set_namespace_(ArgT0&& arg0, ArgT... args);
        std::string* mutable_namespace_();
        PROTOBUF_NODISCARD std::string* release_namespace_();
        void set_allocated_namespace_(std::string* namespace_);
    private:
        const std::string& _internal_namespace_() const;
        inline PROTOBUF_ALWAYS_INLINE void _internal_set_namespace_(const std::string& value);
        std::string* _internal_mutable_namespace_();
    public:

        // string schema = 2;
        void clear_schema();
        const std::string& schema() const;
        template <typename ArgT0 = const std::string&, typename... ArgT>
        void set_schema(ArgT0&& arg0, ArgT... args);
        std::string* mutable_schema();
        PROTOBUF_NODISCARD std::string* release_schema();
        void set_allocated_schema(std::string* schema);
    private:
        const std::string& _internal_schema() const;
        inline PROTOBUF_ALWAYS_INLINE void _internal_set_schema(const std::string& value);
        std::string* _internal_mutable_schema();
    public:

        // uint64 metadataUID = 6;
        void clear_metadatauid();
        uint64_t metadatauid() const;
        void set_metadatauid(uint64_t value);
    private:
        uint64_t _internal_metadatauid() const;
        void _internal_set_metadatauid(uint64_t value);
    public:

        // uint32 timestamp = 5;
        void clear_timestamp();
        uint32_t timestamp() const;
        void set_timestamp(uint32_t value);
    private:
        uint32_t _internal_timestamp() const;
        void _internal_set_timestamp(uint32_t value);
    public:

        // @@protoc_insertion_point(class_scope:ts_proto.MetricWriter)
    private:
        class _Internal;

        template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        ::PROTOBUF_NAMESPACE_ID::internal::MapField<
                MetricWriter_DimensionsEntry_DoNotUse,
                std::string, std::string,
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> dimensions_;
        ::PROTOBUF_NAMESPACE_ID::internal::MapField<
                MetricWriter_MetricsEntry_DoNotUse,
                std::string, double,
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE> metrics_;
        ::PROTOBUF_NAMESPACE_ID::internal::MapField<
                MetricWriter_MetricUIDEntry_DoNotUse,
                std::string, uint64_t,
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64> metricuid_;
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr schema_;
        uint64_t metadatauid_;
        uint32_t timestamp_;
        mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        friend struct ::TableStruct_query_5fwrite_2eproto;
    };
// -------------------------------------------------------------------

    class WriteResponse final :
            public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ts_proto.WriteResponse) */ {
    public:
        inline WriteResponse() : WriteResponse(nullptr) {}
        ~WriteResponse() override;
        explicit constexpr WriteResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        WriteResponse(const WriteResponse& from);
        WriteResponse(WriteResponse&& from) noexcept
                : WriteResponse() {
            *this = ::std::move(from);
        }

        inline WriteResponse& operator=(const WriteResponse& from) {
            CopyFrom(from);
            return *this;
        }
        inline WriteResponse& operator=(WriteResponse&& from) noexcept {
            if (this == &from) return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
                    ) {
                InternalSwap(&from);
            } else {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
            return default_instance().GetMetadata().reflection;
        }
        static const WriteResponse& default_instance() {
            return *internal_default_instance();
        }
        static inline const WriteResponse* internal_default_instance() {
            return reinterpret_cast<const WriteResponse*>(
                    &_WriteResponse_default_instance_);
        }
        static constexpr int kIndexInFileMessages =
                4;

        friend void swap(WriteResponse& a, WriteResponse& b) {
            a.Swap(&b);
        }
        inline void Swap(WriteResponse* other) {
            if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
#else  // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            } else {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(WriteResponse* other) {
            if (other == this) return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        WriteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
            return CreateMaybeMessage<WriteResponse>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const WriteResponse& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const WriteResponse& from);
    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
                uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
        int GetCachedSize() const final { return _cached_size_.Get(); }

    private:
        void SharedCtor();
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(WriteResponse* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
            return "ts_proto.WriteResponse";
        }
    protected:
        explicit WriteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                               bool is_message_owned = false);
    private:
        static void ArenaDtor(void* object);
        inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
    public:

        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int {
            kMetricsReceivedFieldNumber = 1,
        };
        // uint32 metrics_received = 1;
        void clear_metrics_received();
        uint32_t metrics_received() const;
        void set_metrics_received(uint32_t value);
    private:
        uint32_t _internal_metrics_received() const;
        void _internal_set_metrics_received(uint32_t value);
    public:

        // @@protoc_insertion_point(class_scope:ts_proto.WriteResponse)
    private:
        class _Internal;

        template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        uint32_t metrics_received_;
        mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        friend struct ::TableStruct_query_5fwrite_2eproto;
    };
// -------------------------------------------------------------------

    class MetricsReader_DimensionsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MetricsReader_DimensionsEntry_DoNotUse,
            std::string, std::string,
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
    public:
        typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MetricsReader_DimensionsEntry_DoNotUse,
                std::string, std::string,
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
        MetricsReader_DimensionsEntry_DoNotUse();
        explicit constexpr MetricsReader_DimensionsEntry_DoNotUse(
                ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
        explicit MetricsReader_DimensionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
        void MergeFrom(const MetricsReader_DimensionsEntry_DoNotUse& other);
        static const MetricsReader_DimensionsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MetricsReader_DimensionsEntry_DoNotUse*>(&_MetricsReader_DimensionsEntry_DoNotUse_default_instance_); }
        static bool ValidateKey(std::string* s) {
            return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "ts_proto.MetricsReader.DimensionsEntry.key");
        }
        static bool ValidateValue(std::string* s) {
            return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "ts_proto.MetricsReader.DimensionsEntry.value");
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
    };

// -------------------------------------------------------------------

    class MetricsReader final :
            public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ts_proto.MetricsReader) */ {
    public:
        inline MetricsReader() : MetricsReader(nullptr) {}
        ~MetricsReader() override;
        explicit constexpr MetricsReader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        MetricsReader(const MetricsReader& from);
        MetricsReader(MetricsReader&& from) noexcept
                : MetricsReader() {
            *this = ::std::move(from);
        }

        inline MetricsReader& operator=(const MetricsReader& from) {
            CopyFrom(from);
            return *this;
        }
        inline MetricsReader& operator=(MetricsReader&& from) noexcept {
            if (this == &from) return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
                    ) {
                InternalSwap(&from);
            } else {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
            return default_instance().GetMetadata().reflection;
        }
        static const MetricsReader& default_instance() {
            return *internal_default_instance();
        }
        static inline const MetricsReader* internal_default_instance() {
            return reinterpret_cast<const MetricsReader*>(
                    &_MetricsReader_default_instance_);
        }
        static constexpr int kIndexInFileMessages =
                6;

        friend void swap(MetricsReader& a, MetricsReader& b) {
            a.Swap(&b);
        }
        inline void Swap(MetricsReader* other) {
            if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
#else  // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            } else {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(MetricsReader* other) {
            if (other == this) return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        MetricsReader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
            return CreateMaybeMessage<MetricsReader>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const MetricsReader& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const MetricsReader& from);
    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
                uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
        int GetCachedSize() const final { return _cached_size_.Get(); }

    private:
        void SharedCtor();
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(MetricsReader* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
            return "ts_proto.MetricsReader";
        }
    protected:
        explicit MetricsReader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                               bool is_message_owned = false);
    private:
        static void ArenaDtor(void* object);
        inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
    public:

        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------


        // accessors -------------------------------------------------------

        enum : int {
            kDimensionsFieldNumber = 2,
            kMetricNameFieldNumber = 1,
            kQueryStartTimeFieldNumber = 3,
            kQueryEndTimeFieldNumber = 4,
        };
        // map<string, string> dimensions = 2;
        int dimensions_size() const;
    private:
        int _internal_dimensions_size() const;
    public:
        void clear_dimensions();
    private:
        const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
        _internal_dimensions() const;
        ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
        _internal_mutable_dimensions();
    public:
        const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
        dimensions() const;
        ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
        mutable_dimensions();

        // string metric_name = 1;
        void clear_metric_name();
        const std::string& metric_name() const;
        template <typename ArgT0 = const std::string&, typename... ArgT>
        void set_metric_name(ArgT0&& arg0, ArgT... args);
        std::string* mutable_metric_name();
        PROTOBUF_NODISCARD std::string* release_metric_name();
        void set_allocated_metric_name(std::string* metric_name);
    private:
        const std::string& _internal_metric_name() const;
        inline PROTOBUF_ALWAYS_INLINE void _internal_set_metric_name(const std::string& value);
        std::string* _internal_mutable_metric_name();
    public:

        // uint32 query_start_time = 3;
        void clear_query_start_time();
        uint32_t query_start_time() const;
        void set_query_start_time(uint32_t value);
    private:
        uint32_t _internal_query_start_time() const;
        void _internal_set_query_start_time(uint32_t value);
    public:

        // uint32 query_end_time = 4;
        void clear_query_end_time();
        uint32_t query_end_time() const;
        void set_query_end_time(uint32_t value);
    private:
        uint32_t _internal_query_end_time() const;
        void _internal_set_query_end_time(uint32_t value);
    public:

        // @@protoc_insertion_point(class_scope:ts_proto.MetricsReader)
    private:
        class _Internal;

        template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        ::PROTOBUF_NAMESPACE_ID::internal::MapField<
                MetricsReader_DimensionsEntry_DoNotUse,
                std::string, std::string,
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> dimensions_;
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metric_name_;
        uint32_t query_start_time_;
        uint32_t query_end_time_;
        mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        friend struct ::TableStruct_query_5fwrite_2eproto;
    };
// -------------------------------------------------------------------

    class ReaderResponse final :
            public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ts_proto.ReaderResponse) */ {
    public:
        inline ReaderResponse() : ReaderResponse(nullptr) {}
        ~ReaderResponse() override;
        explicit constexpr ReaderResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        ReaderResponse(const ReaderResponse& from);
        ReaderResponse(ReaderResponse&& from) noexcept
                : ReaderResponse() {
            *this = ::std::move(from);
        }

        inline ReaderResponse& operator=(const ReaderResponse& from) {
            CopyFrom(from);
            return *this;
        }
        inline ReaderResponse& operator=(ReaderResponse&& from) noexcept {
            if (this == &from) return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
                    ) {
                InternalSwap(&from);
            } else {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
            return default_instance().GetMetadata().reflection;
        }
        static const ReaderResponse& default_instance() {
            return *internal_default_instance();
        }
        static inline const ReaderResponse* internal_default_instance() {
            return reinterpret_cast<const ReaderResponse*>(
                    &_ReaderResponse_default_instance_);
        }
        static constexpr int kIndexInFileMessages =
                7;

        friend void swap(ReaderResponse& a, ReaderResponse& b) {
            a.Swap(&b);
        }
        inline void Swap(ReaderResponse* other) {
            if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
#else  // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            } else {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(ReaderResponse* other) {
            if (other == this) return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        ReaderResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
            return CreateMaybeMessage<ReaderResponse>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const ReaderResponse& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const ReaderResponse& from);
    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
                uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
        int GetCachedSize() const final { return _cached_size_.Get(); }

    private:
        void SharedCtor();
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(ReaderResponse* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
            return "ts_proto.ReaderResponse";
        }
    protected:
        explicit ReaderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                                bool is_message_owned = false);
    private:
        static void ArenaDtor(void* object);
        inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
    public:

        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int {
            kPointsFieldNumber = 1,
        };
        // repeated .ts_proto.Timeseries points = 1;
        int points_size() const;
    private:
        int _internal_points_size() const;
    public:
        void clear_points();
        ::ts_proto::Timeseries* mutable_points(int index);
        ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ts_proto::Timeseries >*
        mutable_points();
    private:
        const ::ts_proto::Timeseries& _internal_points(int index) const;
        ::ts_proto::Timeseries* _internal_add_points();
    public:
        const ::ts_proto::Timeseries& points(int index) const;
        ::ts_proto::Timeseries* add_points();
        const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ts_proto::Timeseries >&
        points() const;

        // @@protoc_insertion_point(class_scope:ts_proto.ReaderResponse)
    private:
        class _Internal;

        template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ts_proto::Timeseries > points_;
        mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        friend struct ::TableStruct_query_5fwrite_2eproto;
    };
// -------------------------------------------------------------------

    class Timeseries_DimensionsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Timeseries_DimensionsEntry_DoNotUse,
            std::string, std::string,
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
    public:
        typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Timeseries_DimensionsEntry_DoNotUse,
                std::string, std::string,
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
        Timeseries_DimensionsEntry_DoNotUse();
        explicit constexpr Timeseries_DimensionsEntry_DoNotUse(
                ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
        explicit Timeseries_DimensionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
        void MergeFrom(const Timeseries_DimensionsEntry_DoNotUse& other);
        static const Timeseries_DimensionsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Timeseries_DimensionsEntry_DoNotUse*>(&_Timeseries_DimensionsEntry_DoNotUse_default_instance_); }
        static bool ValidateKey(std::string* s) {
            return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "ts_proto.Timeseries.DimensionsEntry.key");
        }
        static bool ValidateValue(std::string* s) {
            return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "ts_proto.Timeseries.DimensionsEntry.value");
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
    };

// -------------------------------------------------------------------

    class Timeseries final :
            public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ts_proto.Timeseries) */ {
    public:
        inline Timeseries() : Timeseries(nullptr) {}
        ~Timeseries() override;
        explicit constexpr Timeseries(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        Timeseries(const Timeseries& from);
        Timeseries(Timeseries&& from) noexcept
                : Timeseries() {
            *this = ::std::move(from);
        }

        inline Timeseries& operator=(const Timeseries& from) {
            CopyFrom(from);
            return *this;
        }
        inline Timeseries& operator=(Timeseries&& from) noexcept {
            if (this == &from) return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
                    ) {
                InternalSwap(&from);
            } else {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
            return default_instance().GetMetadata().reflection;
        }
        static const Timeseries& default_instance() {
            return *internal_default_instance();
        }
        static inline const Timeseries* internal_default_instance() {
            return reinterpret_cast<const Timeseries*>(
                    &_Timeseries_default_instance_);
        }
        static constexpr int kIndexInFileMessages =
                9;

        friend void swap(Timeseries& a, Timeseries& b) {
            a.Swap(&b);
        }
        inline void Swap(Timeseries* other) {
            if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
#else  // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            } else {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(Timeseries* other) {
            if (other == this) return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        Timeseries* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
            return CreateMaybeMessage<Timeseries>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const Timeseries& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const Timeseries& from);
    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
                uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
        int GetCachedSize() const final { return _cached_size_.Get(); }

    private:
        void SharedCtor();
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(Timeseries* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
            return "ts_proto.Timeseries";
        }
    protected:
        explicit Timeseries(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                            bool is_message_owned = false);
    private:
        static void ArenaDtor(void* object);
        inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
    public:

        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------


        // accessors -------------------------------------------------------

        enum : int {
            kDimensionsFieldNumber = 1,
            kPointsFieldNumber = 2,
        };
        // map<string, string> dimensions = 1;
        int dimensions_size() const;
    private:
        int _internal_dimensions_size() const;
    public:
        void clear_dimensions();
    private:
        const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
        _internal_dimensions() const;
        ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
        _internal_mutable_dimensions();
    public:
        const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
        dimensions() const;
        ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
        mutable_dimensions();

        // repeated .ts_proto.TimeseriesPoint points = 2;
        int points_size() const;
    private:
        int _internal_points_size() const;
    public:
        void clear_points();
        ::ts_proto::TimeseriesPoint* mutable_points(int index);
        ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ts_proto::TimeseriesPoint >*
        mutable_points();
    private:
        const ::ts_proto::TimeseriesPoint& _internal_points(int index) const;
        ::ts_proto::TimeseriesPoint* _internal_add_points();
    public:
        const ::ts_proto::TimeseriesPoint& points(int index) const;
        ::ts_proto::TimeseriesPoint* add_points();
        const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ts_proto::TimeseriesPoint >&
        points() const;

        // @@protoc_insertion_point(class_scope:ts_proto.Timeseries)
    private:
        class _Internal;

        template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        ::PROTOBUF_NAMESPACE_ID::internal::MapField<
                Timeseries_DimensionsEntry_DoNotUse,
                std::string, std::string,
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> dimensions_;
        ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ts_proto::TimeseriesPoint > points_;
        mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        friend struct ::TableStruct_query_5fwrite_2eproto;
    };
// -------------------------------------------------------------------

    class TimeseriesPoint final :
            public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ts_proto.TimeseriesPoint) */ {
    public:
        inline TimeseriesPoint() : TimeseriesPoint(nullptr) {}
        ~TimeseriesPoint() override;
        explicit constexpr TimeseriesPoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        TimeseriesPoint(const TimeseriesPoint& from);
        TimeseriesPoint(TimeseriesPoint&& from) noexcept
                : TimeseriesPoint() {
            *this = ::std::move(from);
        }

        inline TimeseriesPoint& operator=(const TimeseriesPoint& from) {
            CopyFrom(from);
            return *this;
        }
        inline TimeseriesPoint& operator=(TimeseriesPoint&& from) noexcept {
            if (this == &from) return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
                    ) {
                InternalSwap(&from);
            } else {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
            return default_instance().GetMetadata().reflection;
        }
        static const TimeseriesPoint& default_instance() {
            return *internal_default_instance();
        }
        static inline const TimeseriesPoint* internal_default_instance() {
            return reinterpret_cast<const TimeseriesPoint*>(
                    &_TimeseriesPoint_default_instance_);
        }
        static constexpr int kIndexInFileMessages =
                10;

        friend void swap(TimeseriesPoint& a, TimeseriesPoint& b) {
            a.Swap(&b);
        }
        inline void Swap(TimeseriesPoint* other) {
            if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
#else  // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            } else {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(TimeseriesPoint* other) {
            if (other == this) return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        TimeseriesPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
            return CreateMaybeMessage<TimeseriesPoint>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const TimeseriesPoint& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const TimeseriesPoint& from);
    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
                uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
        int GetCachedSize() const final { return _cached_size_.Get(); }

    private:
        void SharedCtor();
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(TimeseriesPoint* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
            return "ts_proto.TimeseriesPoint";
        }
    protected:
        explicit TimeseriesPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                                 bool is_message_owned = false);
    private:
        static void ArenaDtor(void* object);
        inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
    public:

        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int {
            kValueFieldNumber = 2,
            kTimestampFieldNumber = 1,
        };
        // double value = 2;
        void clear_value();
        double value() const;
        void set_value(double value);
    private:
        double _internal_value() const;
        void _internal_set_value(double value);
    public:

        // uint32 timestamp = 1;
        void clear_timestamp();
        uint32_t timestamp() const;
        void set_timestamp(uint32_t value);
    private:
        uint32_t _internal_timestamp() const;
        void _internal_set_timestamp(uint32_t value);
    public:

        // @@protoc_insertion_point(class_scope:ts_proto.TimeseriesPoint)
    private:
        class _Internal;

        template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        double value_;
        uint32_t timestamp_;
        mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        friend struct ::TableStruct_query_5fwrite_2eproto;
    };
// -------------------------------------------------------------------

    class UIDReader final :
            public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ts_proto.UIDReader) */ {
    public:
        inline UIDReader() : UIDReader(nullptr) {}
        ~UIDReader() override;
        explicit constexpr UIDReader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        UIDReader(const UIDReader& from);
        UIDReader(UIDReader&& from) noexcept
                : UIDReader() {
            *this = ::std::move(from);
        }

        inline UIDReader& operator=(const UIDReader& from) {
            CopyFrom(from);
            return *this;
        }
        inline UIDReader& operator=(UIDReader&& from) noexcept {
            if (this == &from) return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
                    ) {
                InternalSwap(&from);
            } else {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
            return default_instance().GetMetadata().reflection;
        }
        static const UIDReader& default_instance() {
            return *internal_default_instance();
        }
        static inline const UIDReader* internal_default_instance() {
            return reinterpret_cast<const UIDReader*>(
                    &_UIDReader_default_instance_);
        }
        static constexpr int kIndexInFileMessages =
                11;

        friend void swap(UIDReader& a, UIDReader& b) {
            a.Swap(&b);
        }
        inline void Swap(UIDReader* other) {
            if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
#else  // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            } else {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(UIDReader* other) {
            if (other == this) return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        UIDReader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
            return CreateMaybeMessage<UIDReader>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const UIDReader& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const UIDReader& from);
    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
                uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
        int GetCachedSize() const final { return _cached_size_.Get(); }

    private:
        void SharedCtor();
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(UIDReader* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
            return "ts_proto.UIDReader";
        }
    protected:
        explicit UIDReader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                           bool is_message_owned = false);
    private:
        static void ArenaDtor(void* object);
        inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
    public:

        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int {
            kUidFieldNumber = 1,
            kQueryStartTimeFieldNumber = 2,
            kQueryEndTimeFieldNumber = 3,
        };
        // int64 uid = 1;
        void clear_uid();
        int64_t uid() const;
        void set_uid(int64_t value);
    private:
        int64_t _internal_uid() const;
        void _internal_set_uid(int64_t value);
    public:

        // uint32 query_start_time = 2;
        void clear_query_start_time();
        uint32_t query_start_time() const;
        void set_query_start_time(uint32_t value);
    private:
        uint32_t _internal_query_start_time() const;
        void _internal_set_query_start_time(uint32_t value);
    public:

        // uint32 query_end_time = 3;
        void clear_query_end_time();
        uint32_t query_end_time() const;
        void set_query_end_time(uint32_t value);
    private:
        uint32_t _internal_query_end_time() const;
        void _internal_set_query_end_time(uint32_t value);
    public:

        // @@protoc_insertion_point(class_scope:ts_proto.UIDReader)
    private:
        class _Internal;

        template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        int64_t uid_;
        uint32_t query_start_time_;
        uint32_t query_end_time_;
        mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        friend struct ::TableStruct_query_5fwrite_2eproto;
    };
// ===================================================================


// ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// MetricWriter

// string namespace = 1;
    inline void MetricWriter::clear_namespace_() {
        namespace__.ClearToEmpty();
    }
    inline const std::string& MetricWriter::namespace_() const {
        // @@protoc_insertion_point(field_get:ts_proto.MetricWriter.namespace)
        return _internal_namespace_();
    }
    template <typename ArgT0, typename... ArgT>
    inline PROTOBUF_ALWAYS_INLINE
    void MetricWriter::set_namespace_(ArgT0&& arg0, ArgT... args) {

        namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
        // @@protoc_insertion_point(field_set:ts_proto.MetricWriter.namespace)
    }
    inline std::string* MetricWriter::mutable_namespace_() {
        std::string* _s = _internal_mutable_namespace_();
        // @@protoc_insertion_point(field_mutable:ts_proto.MetricWriter.namespace)
        return _s;
    }
    inline const std::string& MetricWriter::_internal_namespace_() const {
        return namespace__.Get();
    }
    inline void MetricWriter::_internal_set_namespace_(const std::string& value) {

        namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
    }
    inline std::string* MetricWriter::_internal_mutable_namespace_() {

        return namespace__.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    }
    inline std::string* MetricWriter::release_namespace_() {
        // @@protoc_insertion_point(field_release:ts_proto.MetricWriter.namespace)
        return namespace__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
    }
    inline void MetricWriter::set_allocated_namespace_(std::string* namespace_) {
        if (namespace_ != nullptr) {

        } else {

        }
        namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
                                 GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (namespace__.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
        // @@protoc_insertion_point(field_set_allocated:ts_proto.MetricWriter.namespace)
    }

// string schema = 2;
    inline void MetricWriter::clear_schema() {
        schema_.ClearToEmpty();
    }
    inline const std::string& MetricWriter::schema() const {
        // @@protoc_insertion_point(field_get:ts_proto.MetricWriter.schema)
        return _internal_schema();
    }
    template <typename ArgT0, typename... ArgT>
    inline PROTOBUF_ALWAYS_INLINE
    void MetricWriter::set_schema(ArgT0&& arg0, ArgT... args) {

        schema_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
        // @@protoc_insertion_point(field_set:ts_proto.MetricWriter.schema)
    }
    inline std::string* MetricWriter::mutable_schema() {
        std::string* _s = _internal_mutable_schema();
        // @@protoc_insertion_point(field_mutable:ts_proto.MetricWriter.schema)
        return _s;
    }
    inline const std::string& MetricWriter::_internal_schema() const {
        return schema_.Get();
    }
    inline void MetricWriter::_internal_set_schema(const std::string& value) {

        schema_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
    }
    inline std::string* MetricWriter::_internal_mutable_schema() {

        return schema_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    }
    inline std::string* MetricWriter::release_schema() {
        // @@protoc_insertion_point(field_release:ts_proto.MetricWriter.schema)
        return schema_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
    }
    inline void MetricWriter::set_allocated_schema(std::string* schema) {
        if (schema != nullptr) {

        } else {

        }
        schema_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), schema,
                             GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (schema_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    schema_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
        // @@protoc_insertion_point(field_set_allocated:ts_proto.MetricWriter.schema)
    }

// map<string, string> dimensions = 3;
    inline int MetricWriter::_internal_dimensions_size() const {
        return dimensions_.size();
    }
    inline int MetricWriter::dimensions_size() const {
        return _internal_dimensions_size();
    }
    inline void MetricWriter::clear_dimensions() {
        dimensions_.Clear();
    }
    inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
    MetricWriter::_internal_dimensions() const {
        return dimensions_.GetMap();
    }
    inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
    MetricWriter::dimensions() const {
        // @@protoc_insertion_point(field_map:ts_proto.MetricWriter.dimensions)
        return _internal_dimensions();
    }
    inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
    MetricWriter::_internal_mutable_dimensions() {
        return dimensions_.MutableMap();
    }
    inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
    MetricWriter::mutable_dimensions() {
        // @@protoc_insertion_point(field_mutable_map:ts_proto.MetricWriter.dimensions)
        return _internal_mutable_dimensions();
    }

// map<string, double> metrics = 4;
    inline int MetricWriter::_internal_metrics_size() const {
        return metrics_.size();
    }
    inline int MetricWriter::metrics_size() const {
        return _internal_metrics_size();
    }
    inline void MetricWriter::clear_metrics() {
        metrics_.Clear();
    }
    inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
    MetricWriter::_internal_metrics() const {
        return metrics_.GetMap();
    }
    inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
    MetricWriter::metrics() const {
        // @@protoc_insertion_point(field_map:ts_proto.MetricWriter.metrics)
        return _internal_metrics();
    }
    inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
    MetricWriter::_internal_mutable_metrics() {
        return metrics_.MutableMap();
    }
    inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
    MetricWriter::mutable_metrics() {
        // @@protoc_insertion_point(field_mutable_map:ts_proto.MetricWriter.metrics)
        return _internal_mutable_metrics();
    }

// uint32 timestamp = 5;
    inline void MetricWriter::clear_timestamp() {
        timestamp_ = 0u;
    }
    inline uint32_t MetricWriter::_internal_timestamp() const {
        return timestamp_;
    }
    inline uint32_t MetricWriter::timestamp() const {
        // @@protoc_insertion_point(field_get:ts_proto.MetricWriter.timestamp)
        return _internal_timestamp();
    }
    inline void MetricWriter::_internal_set_timestamp(uint32_t value) {

        timestamp_ = value;
    }
    inline void MetricWriter::set_timestamp(uint32_t value) {
        _internal_set_timestamp(value);
        // @@protoc_insertion_point(field_set:ts_proto.MetricWriter.timestamp)
    }

// uint64 metadataUID = 6;
    inline void MetricWriter::clear_metadatauid() {
        metadatauid_ = uint64_t{0u};
    }
    inline uint64_t MetricWriter::_internal_metadatauid() const {
        return metadatauid_;
    }
    inline uint64_t MetricWriter::metadatauid() const {
        // @@protoc_insertion_point(field_get:ts_proto.MetricWriter.metadataUID)
        return _internal_metadatauid();
    }
    inline void MetricWriter::_internal_set_metadatauid(uint64_t value) {

        metadatauid_ = value;
    }
    inline void MetricWriter::set_metadatauid(uint64_t value) {
        _internal_set_metadatauid(value);
        // @@protoc_insertion_point(field_set:ts_proto.MetricWriter.metadataUID)
    }

// map<string, uint64> metricUID = 7;
    inline int MetricWriter::_internal_metricuid_size() const {
        return metricuid_.size();
    }
    inline int MetricWriter::metricuid_size() const {
        return _internal_metricuid_size();
    }
    inline void MetricWriter::clear_metricuid() {
        metricuid_.Clear();
    }
    inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >&
    MetricWriter::_internal_metricuid() const {
        return metricuid_.GetMap();
    }
    inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >&
    MetricWriter::metricuid() const {
        // @@protoc_insertion_point(field_map:ts_proto.MetricWriter.metricUID)
        return _internal_metricuid();
    }
    inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >*
    MetricWriter::_internal_mutable_metricuid() {
        return metricuid_.MutableMap();
    }
    inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >*
    MetricWriter::mutable_metricuid() {
        // @@protoc_insertion_point(field_mutable_map:ts_proto.MetricWriter.metricUID)
        return _internal_mutable_metricuid();
    }

// -------------------------------------------------------------------

// WriteResponse

// uint32 metrics_received = 1;
    inline void WriteResponse::clear_metrics_received() {
        metrics_received_ = 0u;
    }
    inline uint32_t WriteResponse::_internal_metrics_received() const {
        return metrics_received_;
    }
    inline uint32_t WriteResponse::metrics_received() const {
        // @@protoc_insertion_point(field_get:ts_proto.WriteResponse.metrics_received)
        return _internal_metrics_received();
    }
    inline void WriteResponse::_internal_set_metrics_received(uint32_t value) {

        metrics_received_ = value;
    }
    inline void WriteResponse::set_metrics_received(uint32_t value) {
        _internal_set_metrics_received(value);
        // @@protoc_insertion_point(field_set:ts_proto.WriteResponse.metrics_received)
    }

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// MetricsReader

// string metric_name = 1;
    inline void MetricsReader::clear_metric_name() {
        metric_name_.ClearToEmpty();
    }
    inline const std::string& MetricsReader::metric_name() const {
        // @@protoc_insertion_point(field_get:ts_proto.MetricsReader.metric_name)
        return _internal_metric_name();
    }
    template <typename ArgT0, typename... ArgT>
    inline PROTOBUF_ALWAYS_INLINE
    void MetricsReader::set_metric_name(ArgT0&& arg0, ArgT... args) {

        metric_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
        // @@protoc_insertion_point(field_set:ts_proto.MetricsReader.metric_name)
    }
    inline std::string* MetricsReader::mutable_metric_name() {
        std::string* _s = _internal_mutable_metric_name();
        // @@protoc_insertion_point(field_mutable:ts_proto.MetricsReader.metric_name)
        return _s;
    }
    inline const std::string& MetricsReader::_internal_metric_name() const {
        return metric_name_.Get();
    }
    inline void MetricsReader::_internal_set_metric_name(const std::string& value) {

        metric_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
    }
    inline std::string* MetricsReader::_internal_mutable_metric_name() {

        return metric_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    }
    inline std::string* MetricsReader::release_metric_name() {
        // @@protoc_insertion_point(field_release:ts_proto.MetricsReader.metric_name)
        return metric_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
    }
    inline void MetricsReader::set_allocated_metric_name(std::string* metric_name) {
        if (metric_name != nullptr) {

        } else {

        }
        metric_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metric_name,
                                  GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (metric_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    metric_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
        // @@protoc_insertion_point(field_set_allocated:ts_proto.MetricsReader.metric_name)
    }

// map<string, string> dimensions = 2;
    inline int MetricsReader::_internal_dimensions_size() const {
        return dimensions_.size();
    }
    inline int MetricsReader::dimensions_size() const {
        return _internal_dimensions_size();
    }
    inline void MetricsReader::clear_dimensions() {
        dimensions_.Clear();
    }
    inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
    MetricsReader::_internal_dimensions() const {
        return dimensions_.GetMap();
    }
    inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
    MetricsReader::dimensions() const {
        // @@protoc_insertion_point(field_map:ts_proto.MetricsReader.dimensions)
        return _internal_dimensions();
    }
    inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
    MetricsReader::_internal_mutable_dimensions() {
        return dimensions_.MutableMap();
    }
    inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
    MetricsReader::mutable_dimensions() {
        // @@protoc_insertion_point(field_mutable_map:ts_proto.MetricsReader.dimensions)
        return _internal_mutable_dimensions();
    }

// uint32 query_start_time = 3;
    inline void MetricsReader::clear_query_start_time() {
        query_start_time_ = 0u;
    }
    inline uint32_t MetricsReader::_internal_query_start_time() const {
        return query_start_time_;
    }
    inline uint32_t MetricsReader::query_start_time() const {
        // @@protoc_insertion_point(field_get:ts_proto.MetricsReader.query_start_time)
        return _internal_query_start_time();
    }
    inline void MetricsReader::_internal_set_query_start_time(uint32_t value) {

        query_start_time_ = value;
    }
    inline void MetricsReader::set_query_start_time(uint32_t value) {
        _internal_set_query_start_time(value);
        // @@protoc_insertion_point(field_set:ts_proto.MetricsReader.query_start_time)
    }

// uint32 query_end_time = 4;
    inline void MetricsReader::clear_query_end_time() {
        query_end_time_ = 0u;
    }
    inline uint32_t MetricsReader::_internal_query_end_time() const {
        return query_end_time_;
    }
    inline uint32_t MetricsReader::query_end_time() const {
        // @@protoc_insertion_point(field_get:ts_proto.MetricsReader.query_end_time)
        return _internal_query_end_time();
    }
    inline void MetricsReader::_internal_set_query_end_time(uint32_t value) {

        query_end_time_ = value;
    }
    inline void MetricsReader::set_query_end_time(uint32_t value) {
        _internal_set_query_end_time(value);
        // @@protoc_insertion_point(field_set:ts_proto.MetricsReader.query_end_time)
    }

// -------------------------------------------------------------------

// ReaderResponse

// repeated .ts_proto.Timeseries points = 1;
    inline int ReaderResponse::_internal_points_size() const {
        return points_.size();
    }
    inline int ReaderResponse::points_size() const {
        return _internal_points_size();
    }
    inline void ReaderResponse::clear_points() {
        points_.Clear();
    }
    inline ::ts_proto::Timeseries* ReaderResponse::mutable_points(int index) {
        // @@protoc_insertion_point(field_mutable:ts_proto.ReaderResponse.points)
        return points_.Mutable(index);
    }
    inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ts_proto::Timeseries >*
    ReaderResponse::mutable_points() {
        // @@protoc_insertion_point(field_mutable_list:ts_proto.ReaderResponse.points)
        return &points_;
    }
    inline const ::ts_proto::Timeseries& ReaderResponse::_internal_points(int index) const {
        return points_.Get(index);
    }
    inline const ::ts_proto::Timeseries& ReaderResponse::points(int index) const {
        // @@protoc_insertion_point(field_get:ts_proto.ReaderResponse.points)
        return _internal_points(index);
    }
    inline ::ts_proto::Timeseries* ReaderResponse::_internal_add_points() {
        return points_.Add();
    }
    inline ::ts_proto::Timeseries* ReaderResponse::add_points() {
        ::ts_proto::Timeseries* _add = _internal_add_points();
        // @@protoc_insertion_point(field_add:ts_proto.ReaderResponse.points)
        return _add;
    }
    inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ts_proto::Timeseries >&
    ReaderResponse::points() const {
        // @@protoc_insertion_point(field_list:ts_proto.ReaderResponse.points)
        return points_;
    }

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Timeseries

// map<string, string> dimensions = 1;
    inline int Timeseries::_internal_dimensions_size() const {
        return dimensions_.size();
    }
    inline int Timeseries::dimensions_size() const {
        return _internal_dimensions_size();
    }
    inline void Timeseries::clear_dimensions() {
        dimensions_.Clear();
    }
    inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
    Timeseries::_internal_dimensions() const {
        return dimensions_.GetMap();
    }
    inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
    Timeseries::dimensions() const {
        // @@protoc_insertion_point(field_map:ts_proto.Timeseries.dimensions)
        return _internal_dimensions();
    }
    inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
    Timeseries::_internal_mutable_dimensions() {
        return dimensions_.MutableMap();
    }
    inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
    Timeseries::mutable_dimensions() {
        // @@protoc_insertion_point(field_mutable_map:ts_proto.Timeseries.dimensions)
        return _internal_mutable_dimensions();
    }

// repeated .ts_proto.TimeseriesPoint points = 2;
    inline int Timeseries::_internal_points_size() const {
        return points_.size();
    }
    inline int Timeseries::points_size() const {
        return _internal_points_size();
    }
    inline void Timeseries::clear_points() {
        points_.Clear();
    }
    inline ::ts_proto::TimeseriesPoint* Timeseries::mutable_points(int index) {
        // @@protoc_insertion_point(field_mutable:ts_proto.Timeseries.points)
        return points_.Mutable(index);
    }
    inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ts_proto::TimeseriesPoint >*
    Timeseries::mutable_points() {
        // @@protoc_insertion_point(field_mutable_list:ts_proto.Timeseries.points)
        return &points_;
    }
    inline const ::ts_proto::TimeseriesPoint& Timeseries::_internal_points(int index) const {
        return points_.Get(index);
    }
    inline const ::ts_proto::TimeseriesPoint& Timeseries::points(int index) const {
        // @@protoc_insertion_point(field_get:ts_proto.Timeseries.points)
        return _internal_points(index);
    }
    inline ::ts_proto::TimeseriesPoint* Timeseries::_internal_add_points() {
        return points_.Add();
    }
    inline ::ts_proto::TimeseriesPoint* Timeseries::add_points() {
        ::ts_proto::TimeseriesPoint* _add = _internal_add_points();
        // @@protoc_insertion_point(field_add:ts_proto.Timeseries.points)
        return _add;
    }
    inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ts_proto::TimeseriesPoint >&
    Timeseries::points() const {
        // @@protoc_insertion_point(field_list:ts_proto.Timeseries.points)
        return points_;
    }

// -------------------------------------------------------------------

// TimeseriesPoint

// uint32 timestamp = 1;
    inline void TimeseriesPoint::clear_timestamp() {
        timestamp_ = 0u;
    }
    inline uint32_t TimeseriesPoint::_internal_timestamp() const {
        return timestamp_;
    }
    inline uint32_t TimeseriesPoint::timestamp() const {
        // @@protoc_insertion_point(field_get:ts_proto.TimeseriesPoint.timestamp)
        return _internal_timestamp();
    }
    inline void TimeseriesPoint::_internal_set_timestamp(uint32_t value) {

        timestamp_ = value;
    }
    inline void TimeseriesPoint::set_timestamp(uint32_t value) {
        _internal_set_timestamp(value);
        // @@protoc_insertion_point(field_set:ts_proto.TimeseriesPoint.timestamp)
    }

// double value = 2;
    inline void TimeseriesPoint::clear_value() {
        value_ = 0;
    }
    inline double TimeseriesPoint::_internal_value() const {
        return value_;
    }
    inline double TimeseriesPoint::value() const {
        // @@protoc_insertion_point(field_get:ts_proto.TimeseriesPoint.value)
        return _internal_value();
    }
    inline void TimeseriesPoint::_internal_set_value(double value) {

        value_ = value;
    }
    inline void TimeseriesPoint::set_value(double value) {
        _internal_set_value(value);
        // @@protoc_insertion_point(field_set:ts_proto.TimeseriesPoint.value)
    }

// -------------------------------------------------------------------

// UIDReader

// int64 uid = 1;
    inline void UIDReader::clear_uid() {
        uid_ = int64_t{0};
    }
    inline int64_t UIDReader::_internal_uid() const {
        return uid_;
    }
    inline int64_t UIDReader::uid() const {
        // @@protoc_insertion_point(field_get:ts_proto.UIDReader.uid)
        return _internal_uid();
    }
    inline void UIDReader::_internal_set_uid(int64_t value) {

        uid_ = value;
    }
    inline void UIDReader::set_uid(int64_t value) {
        _internal_set_uid(value);
        // @@protoc_insertion_point(field_set:ts_proto.UIDReader.uid)
    }

// uint32 query_start_time = 2;
    inline void UIDReader::clear_query_start_time() {
        query_start_time_ = 0u;
    }
    inline uint32_t UIDReader::_internal_query_start_time() const {
        return query_start_time_;
    }
    inline uint32_t UIDReader::query_start_time() const {
        // @@protoc_insertion_point(field_get:ts_proto.UIDReader.query_start_time)
        return _internal_query_start_time();
    }
    inline void UIDReader::_internal_set_query_start_time(uint32_t value) {

        query_start_time_ = value;
    }
    inline void UIDReader::set_query_start_time(uint32_t value) {
        _internal_set_query_start_time(value);
        // @@protoc_insertion_point(field_set:ts_proto.UIDReader.query_start_time)
    }

// uint32 query_end_time = 3;
    inline void UIDReader::clear_query_end_time() {
        query_end_time_ = 0u;
    }
    inline uint32_t UIDReader::_internal_query_end_time() const {
        return query_end_time_;
    }
    inline uint32_t UIDReader::query_end_time() const {
        // @@protoc_insertion_point(field_get:ts_proto.UIDReader.query_end_time)
        return _internal_query_end_time();
    }
    inline void UIDReader::_internal_set_query_end_time(uint32_t value) {

        query_end_time_ = value;
    }
    inline void UIDReader::set_query_end_time(uint32_t value) {
        _internal_set_query_end_time(value);
        // @@protoc_insertion_point(field_set:ts_proto.UIDReader.query_end_time)
    }

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ts_proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_query_5fwrite_2eproto
